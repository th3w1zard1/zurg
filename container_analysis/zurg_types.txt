**big.Int

**http.Request

**http.Response

**net.DNSError

**net._Ctype_struct_addrinfo

**struct { Generated string "json:\"generated\""; *realdebrid.Alias }

**struct { Progress float64 "json:\"progress\""; Added string "json:\"added\""; *realdebrid.Alias }

**struct { Progress float64 "json:\"progress\""; Added string "json:\"added\""; Ended string "json:\"ended\""; *realdebrid.Alias }

**torrent.Torrent

*[1024]uint8

*[124]uintptr

*[127]uintptr

*[132]uintptr

*[13]uintptr

*[16384]uint8

*[19]int

*[2048]uint8

*[256]*hpack.node

*[316]int

*[32768]uint8

*[4096]uint8

*[4]uintptr

*[7]uintptr

*[8192]uint8

*[8]uint8

*[]*runtime.bmap

*[]*torrent.Torrent

*[][]uint8

*[]bool

*[]chan cmap.Tuple[go.shape.string,go.shape.*uint8]

*[]chan cmap.Tuple[go.shape.string,go.shape.string]

*[]chan cmap.Tuple[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }]

*[]float32

*[]float64

*[]hpack.HeaderField

*[]int

*[]int32

*[]int64

*[][]uint8

*[]realdebrid.Download

*[]realdebrid.HostInfo

*[]realdebrid.Torrent

*[]runtime.ancestorInfo

*[]string

*[]syscall.Iovec

*[]int64

*[]uint

*[]uint8

*[]unsafe.Pointer

*abi.ArrayType

*int

*uint8

*uint8

*abi.FuncType

*abi.Imethod

*[2]uint8

*abi.InterfaceType

*uint

*abi.MapType

*abi.Method

*abi.Name

*int32

*abi.PtrType

*abi.RegArgs

*abi.SliceType

*abi.StructField

*abi.StructType

*uint8

*int32

*abi.Type

*int32

*abi.UncommonType

*int

*aes.aesCipher

*aes.aesCipherAsm

*aes.aesCipherGCM

*aes.gcmAsm

*ants.Logger

*ants.Options

*ants.Pool

*ants.goWorker

*ants.loopQueue

*ants.worker

*ants.workerQueue

*ants.workerStack

*asn1.BitString

*int

*bool

*[]int

*[]uint8

*asn1.RawValue

*asn1.StructuralError

*asn1.SyntaxError

*uint8

*asn1.bitStringEncoder

*uint8

*[]uint8

*asn1.encoder

*asn1.fieldParameters

*int64

*asn1.invalidUnmarshalError

*[]asn1.encoder

*[]int

*[]asn1.encoder

*string

*asn1.tagAndLength

*asn1.taggedEncoder

*atomic.Bool

*atomic.Bool

*atomic.Int32

*atomic.Int64

*atomic.Int64

*atomic.Pointer[interface {}]

*atomic.Pointer[internal/godebug.value]

*atomic.Pointer[net/http.response]

*atomic.Pointer[runtime._defer]

*atomic.Pointer[string]

*atomic.Pointer[sync.readOnly]

*atomic.Uint32

*atomic.Uint32

*atomic.Uint64

*atomic.Uint64

*atomic.Uint8

*atomic.Uintptr

*atomic.UnsafePointer

*atomic.Value

*atomic.align64

*atomic.align64

*atomic.noCopy

*atomic.noCopy

*int64

*base64.Encoding

*int8

*big.ErrNaN

*big.Float

*big.Int

*big.Rat

*uint8

*uint

*big.byteReader

*big.divisor

*uint8

*[]uint

*bigmod.Modulus

*bigmod.Nat

*uint

*bisect.Matcher

*bisect.Writer

*bisect.atomicPointerDedup

*bisect.cond

*bisect.dedup

*bisect.parseError

*bool

*boring.PrivateKeyECDH

*boring.PublicKeyECDH

*buffer.Buffer

*buffer.Pool

*bufio.ReadWriter

*bufio.Reader

*bufio.Writer

*bytes.Buffer

*bytes.Reader

*int8

*chacha20poly1305.chacha20poly1305

*chacha8rand.State

*chi.ChainHandler

*chi.Context

*[]func(http.Handler) http.Handler

*chi.Mux

*chi.Route

*chi.RouteParams

*chi.Router

*chi.Routes

*chi.contextKey

*chi.endpoint

*map[uint]*chi.endpoint

*uint

*chi.node

*uint8

*[]*chi.node

*cipher.AEAD

*cipher.Block

*cipher.BlockMode

*cipher.Stream

*cipher.StreamReader

*cipher.cbc

*cipher.cbcDecAble

*cipher.cbcDecrypter

*cipher.cbcEncAble

*cipher.cbcEncrypter

*cipher.ctr

*cipher.ctrAble

*cipher.gcm

*cipher.gcmAble

*cipher.gcmFieldElement

*cmap.ConcurrentMapShared[go.shape.string,go.shape.*uint8]

*cmap.ConcurrentMapShared[go.shape.string,go.shape.string]

*cmap.ConcurrentMapShared[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }]

*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.File]

*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]

*cmap.ConcurrentMapShared[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]

*cmap.ConcurrentMapShared[string,string]

*cmap.ConcurrentMap[go.shape.string,go.shape.*uint8]

*cmap.ConcurrentMap[go.shape.string,go.shape.string]

*cmap.ConcurrentMap[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }]

*cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.File]

*cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]

*cmap.ConcurrentMap[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]

*cmap.ConcurrentMap[string,string]

*func(string, *torrent.File)

*func(string, *torrent.Torrent)

*func(string, *realdebrid.Download)

*func(string, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent])

*func(string, string)

*func(string, *torrent.File, bool) bool

*func(string, *torrent.Torrent, bool) bool

*func(string, *realdebrid.Download, bool) bool

*func(string, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent], bool) bool

*func(string, string, bool) bool

*cmap.Tuple[go.shape.string,go.shape.*uint8]

*cmap.Tuple[go.shape.string,go.shape.string]

*cmap.Tuple[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }]

*cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.File]

*cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*cmap.Tuple[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]

*cmap.Tuple[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]

*cmap.Tuple[string,string]

*func(bool, *torrent.File, *torrent.File) *torrent.File

*func(bool, *torrent.Torrent, *torrent.Torrent) *torrent.Torrent

*func(bool, *realdebrid.Download, *realdebrid.Download) *realdebrid.Download

*func(bool, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent], cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*func(bool, string, string) string

*cobra.Command

*cobra.CompletionOptions

*cobra.FParseErrWhitelist

*cobra.Group

*func(*cobra.Command, []string) error

*int

*[]*cobra.Command

*cobra.flagCompError

*uint8

*complex128

*complex64

*concurrent.Map

*concurrent.UnboundedExecutor

*config.ConfigInterface

*config.Directory

*config.FilterConditionsV1

*config.ZurgConfig

*config.ZurgConfigV1

*func()

*context.Context

*context.afterFuncer

*context.backgroundCtx

*context.cancelCtx

*context.canceler

*context.deadlineExceededError

*context.emptyCtx

*context.stopCtx

*context.stringer

*context.timerCtx

*context.todoCtx

*context.valueCtx

*context.withoutCancelCtx

*cpu.option

*cpu.option

*[256]uint32

*[8][256]uint32

*crypto.Decrypter

*crypto.DecrypterOpts

*uint

*crypto.PrivateKey

*crypto.PublicKey

*crypto.Signer

*crypto.SignerOpts

*cryptobyte.BuildError

*cryptobyte.Builder

*csv.ParseError

*csv.position

*int

*des.desCipher

*des.tripleDESCipher

*dnsmessage.AAAAResource

*dnsmessage.AResource

*dnsmessage.CNAMEResource

*uint16

*dnsmessage.MXResource

*dnsmessage.NSResource

*dnsmessage.Name

*dnsmessage.OPTResource

*dnsmessage.Option

*dnsmessage.PTRResource

*dnsmessage.Parser

*uint16

*dnsmessage.Resource

*dnsmessage.ResourceBody

*dnsmessage.ResourceHeader

*dnsmessage.SOAResource

*dnsmessage.SRVResource

*dnsmessage.TXTResource

*uint16

*dnsmessage.UnknownResource

*dnsmessage.header

*dnsmessage.nestedError

*uint8

*dsa.Parameters

*dsa.PublicKey

*ecdh.Curve

*ecdh.PrivateKey

*ecdh.PublicKey

*ecdh.nistCurve[*crypto/internal/nistec.P256Point]

*ecdh.nistCurve[*crypto/internal/nistec.P384Point]

*ecdh.nistCurve[*crypto/internal/nistec.P521Point]

*ecdh.x25519Curve

*ecdsa.PrivateKey

*ecdsa.PublicKey

*ecdsa.nistCurve[*crypto/internal/nistec.P224Point]

*ecdsa.nistCurve[*crypto/internal/nistec.P256Point]

*ecdsa.nistCurve[*crypto/internal/nistec.P384Point]

*ecdsa.nistCurve[*crypto/internal/nistec.P521Point]

*ecdsa.zr

*ed25519.Options

*[]uint8

*[]uint8

*edwards25519.Point

*[0]func()

*elliptic.Curve

*elliptic.CurveParams

*elliptic.nistCurve[*crypto/internal/nistec.P224Point]

*elliptic.nistCurve[*crypto/internal/nistec.P256Point]

*elliptic.nistCurve[*crypto/internal/nistec.P384Point]

*elliptic.nistCurve[*crypto/internal/nistec.P521Point]

*elliptic.p256Curve

*elliptic.unmarshaler

*encoding.TextMarshaler

*encoding.TextUnmarshaler

*error

*errors.errorString

*exec.Cmd

*exec.Error

*exec.ExitError

*exec.ctxResult

*exec.goroutineStatus

*exec.prefixSuffixSaver

*exec.wrappedError

*fiat.P224Element

*fiat.P384Element

*fiat.P521Element

*[4]uint64

*[6]uint64

*[9]uint64

*field.Element

*int

*flag.Flag

*flag.FlagSet

*flag.Value

*flag.boolFlag

*func(string) error

*bool

*int64

*float64

*func(string) error

*int64

*int

*string

*flag.textValue

*uint64

*uint

*int64

*string

*flate.Reader

*flate.Resetter

*[]flate.literalNode

*[]flate.literalNode

*flate.decompressor

*flate.dictDecoder

*flate.hcode

*flate.huffmanDecoder

*flate.huffmanEncoder

*flate.literalNode

*float32

*float64

*fmt.Formatter

*fmt.GoStringer

*fmt.ScanState

*fmt.Scanner

*fmt.State

*fmt.Stringer

*[]uint8

*fmt.fmt

*fmt.fmtFlags

*fmt.pp

*fmt.readRune

*fmt.scanError

*fmt.ss

*fmt.ssave

*string

*fmt.wrapError

*fmt.wrapErrors

*fmtsort.SortedMap

*fs.DirEntry

*fs.FileInfo

*uint32

*fs.PathError

*[]net.IPAddr

*[]string

*[]dnsmessage.Resource

*int

*string

*go.shape.struct { encoding/json.v reflect.Value; encoding/json.ks string }

*go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }

*godebug.Setting

*godebug.runtimeStderr

*godebug.setting

*godebug.value

*godebugs.Info

*gzip.Header

*gzip.Reader

*handlers.Handlers

*hash.Hash

*uint8

*hkdf.hkdf

*hmac.hmac

*hmac.marshalable

*hpack.Decoder

*hpack.DecodingError

*hpack.Encoder

*hpack.HeaderField

*int

*hpack.dynamicTable

*hpack.headerFieldTable

*[0]func()

*hpack.node

*hpack.pairNameValue

*http.ApiErrorResponse

*http.Client

*int

*http.Cookie

*http.CookieJar

*http.HTTPClient

*http.Handler

*func(http.ResponseWriter, *http.Request)

*map[string][]string

*http.I

*http.MaxBytesError

*http.ProtocolError

*http.PushOptions

*http.RateLimiter

*http.Request

*http.Response

*http.ResponseWriter

*http.RoundTripper

*int

*http.ServeMux

*http.Server

*http.Transport

*http.baseContexter

*http.body

*http.bodyEOFSignal

*http.bodyLocked

*http.bufioFlushWriter

*http.byteReader

*http.cancelKey

*http.cancelTimerBody

*http.canceler

*http.checkConnErrorWriter

*http.chunkWriter

*http.closeWriter

*http.conn

*http.connLRU

*http.connReader

*http.connectMethod

*http.connectMethodKey

*http.contextKey

*http.entry[string,*net/http.routingNode]

*http.erringRoundTripper

*http.errorReader

*http.exactSig

*http.expectContinueReader

*http.fakeLocker

*http.finishAsyncByteRead

*http.globalOptionsHandler

*http.gzipReader

*http.h2Transport

*http.headerSorter

*[]uint8

*http.http2ClientConn

*http.http2ClientConnPool

*http.http2ClientConnState

*uint32

*http.http2ContinuationFrame

*http.http2DataFrame

*uint32

*uint8

*http.http2Frame

*http.http2FrameHeader

*uint8

*http.http2FrameWriteRequest

*http.http2Framer

*http.http2GoAwayError

*http.http2GoAwayFrame

*http.http2HeadersFrame

*http.http2HeadersFrameParam

*http.http2MetaHeadersFrame

*http.http2OpenStreamOptions

*http.http2PingFrame

*http.http2PriorityFrame

*http.http2PriorityParam

*http.http2PushPromiseFrame

*http.http2PushPromiseParam

*http.http2RSTStreamFrame

*http.http2RoundTripOpt

*http.http2ServeConnOpts

*http.http2Server

*http.http2Setting

*uint16

*http.http2SettingsFrame

*http.http2StreamError

*http.http2Transport

*http.http2UnknownFrame

*http.http2WindowUpdateFrame

*http.http2WriteScheduler

*http.http2addConnCall

*http.http2bodyReadMsg

*http.http2bufferedWriter

*http.http2chunkWriter

*http.http2clientConnPool

*http.http2clientConnPoolIdleCloser

*http.http2clientStream

*chan struct {}

*http.http2connError

*http.http2connectionStater

*http.http2dataBuffer

*http.http2dialCall

*string

*http.http2erringRoundTripper

*http.http2flushFrameWriter

*http.http2frameCache

*func(*http.http2frameCache, http.http2FrameHeader, func(string), []uint8) (http.http2Frame, error)

*http.http2frameWriteResult

*chan struct {}

*http.http2goAwayFlowError

*uint64

*http.http2gzipReader

*http.http2handlerPanicRST

*string

*string

*http.http2headersOrContinuation

*http.http2httpError

*[0]func()

*http.http2inflow

*http.http2missingBody

*http.http2noBodyReader

*http.http2noCachedConnError

*http.http2noDialClientConnPool

*http.http2noDialH2RoundTripper

*http.http2outflow

*http.http2pipe

*http.http2pipeBuffer

*http.http2priorityNode

*int

*http.http2priorityWriteScheduler

*string

*http.http2readFrameResult

*http.http2requestBody

*http.http2responseWriter

*http.http2responseWriterState

*http.http2roundRobinWriteScheduler

*http.http2serverConn

*http.http2serverInternalState

*int

*[]*http.http2priorityNode

*http.http2sorter

*http.http2startPushRequest

*http.http2stickyErrWriter

*http.http2stream

*int

*http.http2transportResponseBody

*http.http2unstartedHandler

*http.http2write100ContinueHeadersFrame

*http.http2writeContext

*http.http2writeData

*http.http2writeFramer

*http.http2writeGoAway

*http.http2writePingAck

*http.http2writePushPromise

*http.http2writeQueue

*[]*http.http2writeQueue

*http.http2writeResHeaders

*[]http.http2Setting

*http.http2writeSettingsAck

*http.http2writeWindowUpdate

*http.httpError

*[0]func()

*http.initALPNRequest

*http.keyValues

*http.mapping[string,*net/http.routingNode]

*http.maskedSig

*http.maxBytesReader

*http.mp4Sig

*http.muxEntry

*http.noBody

*http.nothingWrittenError

*http.onceCloseListener

*http.pattern

*http.persistConn

*http.persistConnWriter

*http.readResult

*http.readTrackingBody

*http.readWriteCloserBody

*http.redirectHandler

*string

*http.requestAndChan

*http.requestBodyReadError

*http.requestTooLarger

*http.response

*http.responseAndError

*http.routingIndex

*http.routingIndexKey

*http.routingNode

*http.segment

*http.serveMux121

*http.serverHandler

*http.sniffSig

*http.socksAddr

*int

*http.socksUsernamePassword

*http.statusError

*http.stringWriter

*http.textSig

*http.tlsHandshakeTimeoutError

*http.transferWriter

*http.transportReadFromServerError

*http.transportRequest

*http.unsupportedTEError

*http.wantConn

*http.wantConnQueue

*http.writeRequest

*http.writerOnly

*http_dialer.HttpTunnel

*http_dialer.ProxyAuthorization

*httpproxy.Config

*httpproxy.allMatch

*httpproxy.cidrMatch

*httpproxy.config

*httpproxy.domainMatch

*httpproxy.ipMatch

*httpproxy.matcher

*httptrace.ClientTrace

*httptrace.DNSDoneInfo

*httptrace.DNSStartInfo

*httptrace.GotConnInfo

*httptrace.WroteRequestInfo

*httptrace.clientEventContextKey

*idna.labelError

*int32

*int

*int16

*int32

*int64

*int8

*interface {}

*intern.Value

*intern.key

*internal.FlushAfterChunkWriter

*internal.chunkedReader

*internal.chunkedWriter

*io.ByteReader

*io.ByteScanner

*io.ByteWriter

*io.Closer

*io.LimitedReader

*io.ReadCloser

*io.ReadWriteCloser

*io.ReadWriter

*io.Reader

*io.ReaderAt

*io.ReaderFrom

*io.RuneReader

*io.RuneScanner

*io.SectionReader

*io.StringWriter

*io.WriteCloser

*io.Writer

*io.WriterTo

*io.discard

*io.eofReader

*io.multiReader

*io.nopCloser

*io.nopCloserWriterTo

*json.Decoder

*json.Encoder

*json.InvalidUnmarshalError

*json.Marshaler

*json.MarshalerError

*string

*[]uint8

*json.SyntaxError

*json.UnmarshalTypeError

*json.Unmarshaler

*json.UnsupportedTypeError

*json.UnsupportedValueError

*json.arrayEncoder

*[]json.field

*json.condAddrEncoder

*json.decodeState

*json.encOpts

*json.encodeState

*func(*json.encodeState, reflect.Value, json.encOpts)

*json.errorContext

*json.field

*int

*json.jsonError

*json.mapEncoder

*json.ptrEncoder

*json.reflectWithString

*json.scanner

*json.sliceEncoder

*json.structEncoder

*json.structFields

*json.unquotedValue

*jsoniter.API

*jsoniter.Any

*jsoniter.Binding

*jsoniter.Config

*jsoniter.Decoder

*map[reflect2.Type]jsoniter.ValDecoder

*func(unsafe.Pointer, *jsoniter.Iterator)

*jsoniter.Encoder

*map[reflect2.Type]jsoniter.ValEncoder

*func(unsafe.Pointer, *jsoniter.Stream)

*jsoniter.Extension

*jsoniter.IsEmbeddedPtrNil

*jsoniter.Iterator

*jsoniter.IteratorPool

*string

*jsoniter.OptionalDecoder

*jsoniter.OptionalEncoder

*[]uint8

*jsoniter.Stream

*jsoniter.StreamPool

*jsoniter.StructDescriptor

*jsoniter.ValDecoder

*jsoniter.ValEncoder

*int

*jsoniter.anyCodec

*jsoniter.arrayAny

*jsoniter.arrayDecoder

*jsoniter.arrayEncoder

*jsoniter.arrayLazyAny

*jsoniter.base64Codec

*jsoniter.baseAny

*jsoniter.bindingTo

*jsoniter.boolCodec

*jsoniter.checkIsEmpty

*jsoniter.ctx

*jsoniter.dereferenceDecoder

*jsoniter.dereferenceEncoder

*jsoniter.directAnyCodec

*jsoniter.directMarshalerEncoder

*jsoniter.directTextMarshalerEncoder

*jsoniter.dynamicEncoder

*jsoniter.dynamicMapKeyEncoder

*jsoniter.efaceDecoder

*jsoniter.eightFieldsStructDecoder

*jsoniter.emptyArrayEncoder

*jsoniter.emptyStructEncoder

*jsoniter.encodedKV

*[]jsoniter.encodedKV

*jsoniter.falseAny

*jsoniter.fiveFieldsStructDecoder

*jsoniter.float32Codec

*jsoniter.float64Codec

*jsoniter.floatAny

*jsoniter.fourFieldsStructDecoder

*jsoniter.frozenConfig

*jsoniter.funcDecoder

*jsoniter.funcEncoder

*jsoniter.generalStructDecoder

*jsoniter.htmlEscapedStringEncoder

*jsoniter.ifaceDecoder

*jsoniter.int16Codec

*jsoniter.int32Any

*jsoniter.int32Codec

*jsoniter.int64Any

*jsoniter.int64Codec

*jsoniter.int8Codec

*jsoniter.invalidAny

*jsoniter.jsonNumberCodec

*jsoniter.jsonRawMessageCodec

*jsoniter.jsoniterNumberCodec

*jsoniter.jsoniterRawMessageCodec

*jsoniter.lazyErrorDecoder

*jsoniter.lazyErrorEncoder

*jsoniter.lossyFloat32Encoder

*jsoniter.lossyFloat64Encoder

*jsoniter.mapAny

*jsoniter.mapDecoder

*jsoniter.mapEncoder

*jsoniter.marshalerEncoder

*jsoniter.nilAny

*jsoniter.nineFieldsStructDecoder

*jsoniter.numberLazyAny

*jsoniter.numericMapKeyDecoder

*jsoniter.numericMapKeyEncoder

*jsoniter.objectAny

*jsoniter.objectLazyAny

*jsoniter.oneFieldStructDecoder

*jsoniter.onePtrEncoder

*jsoniter.placeholderDecoder

*jsoniter.placeholderEncoder

*jsoniter.referenceDecoder

*jsoniter.referenceEncoder

*jsoniter.sevenFieldsStructDecoder

*jsoniter.sixFieldsStructDecoder

*jsoniter.skipObjectDecoder

*jsoniter.sliceDecoder

*jsoniter.sliceEncoder

*jsoniter.sortKeysMapEncoder

*[]*jsoniter.Binding

*jsoniter.stringAny

*jsoniter.stringCodec

*jsoniter.stringModeNumberDecoder

*jsoniter.stringModeNumberEncoder

*jsoniter.stringModeStringDecoder

*jsoniter.stringModeStringEncoder

*jsoniter.structEncoder

*jsoniter.structFieldDecoder

*jsoniter.structFieldEncoder

*jsoniter.structFieldTo

*jsoniter.tenFieldsStructDecoder

*jsoniter.textMarshalerEncoder

*jsoniter.textUnmarshalerDecoder

*jsoniter.threeFieldsStructDecoder

*jsoniter.trueAny

*jsoniter.twoFieldsStructDecoder

*jsoniter.uint16Codec

*jsoniter.uint32Any

*jsoniter.uint32Codec

*jsoniter.uint64Any

*jsoniter.uint64Codec

*jsoniter.uint8Codec

*jsoniter.unmarshalerDecoder

*list.Element

*list.List

*log.Logger

*logutil.Logger

*map[string]*realdebrid.Download

*map[string]*torrent.File

*map[string]*torrent.Torrent

*map[string]cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*map[string]int

*map[string]int64

*map[string]string

*mapset.Iterator[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*mapset.Iterator[go.shape.*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*mapset.Iterator[go.shape.int]

*mapset.Iterator[go.shape.string]

*mapset.Iterator[int]

*mapset.Iterator[string]

*mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*mapset.Set[int]

*mapset.Set[string]

*mapset.threadSafeSet[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*mapset.threadSafeSet[go.shape.*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

*mapset.threadSafeSet[go.shape.int]

*mapset.threadSafeSet[go.shape.string]

*mapset.threadSafeSet[int]

*mapset.threadSafeSet[string]

*map[*torrent.Torrent]struct {}

*map[*torrent.Torrent]struct {}

*map[int]struct {}

*map[string]struct {}

*map[int]struct {}

*map[string]struct {}

*md5.digest

*multierr.multiError

*multipart.File

*multipart.FileHeader

*multipart.Form

*multipart.Part

*multipart.Reader

*multipart.Writer

*multipart.part

*multipart.partReader

*multipart.sectionReadCloser

*multipart.stickyErrorReader

*multipart.writerOnly

*net.Addr

*net.AddrError

*net.Conn

*net.DNSError

*net.Dialer

*net.Error

*uint

*[]uint8

*[]uint8

*net.IPAddr

*net.IPConn

*[]uint8

*net.IPNet

*net.Interface

*net.ListenConfig

*net.Listener

*net.MX

*net.NS

*net.OpError

*net.PacketConn

*net.ParseError

*net.Resolver

*net.SRV

*net.TCPAddr

*net.TCPConn

*net.TCPListener

*net.UDPAddr

*net.UDPConn

*net.UnixAddr

*net.UnixConn

*net.UnixListener

*string

*int8

*int32

*net._Ctype_struct_addrinfo

*net._Ctype_struct_sockaddr

*uint8

*uint32

*uint16

*[]net.Addr

*net.addrPortUDPAddr

*int

*net.byName

*[]*net.MX

*[]*net.SRV

*net.byRFC6724

*net.canceledError

*net.conn

*net.dialResult

*net.dnsConfig

*net.file

*int

*net.ipAttr

*uint8

*net.netFD

*net.noReadFrom

*net.noWriteTo

*net.nssConf

*net.nssCriterion

*net.nssSource

*net.onlyValuesCtx

*net.rawConn

*net.rawListener

*net.result

*net.result[[]net.IPAddr]

*net.result[[]string]

*net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource]

*net.result[go.shape.[]net.IPAddr]

*net.result[go.shape.[]string]

*net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource]

*net.result[go.shape.int]

*net.result[int]

*uint8

*net.sockaddr

*net.sysDialer

*net.tcpConnWithoutReadFrom

*net.tcpConnWithoutWriteTo

*net.temporary

*net.timeout

*net.timeoutError

*netip.Addr

*netip.AddrPort

*netip.Prefix

*netip.parseAddrError

*netip.uint128

*nettrace.LookupIPAltResolverKey

*nettrace.Trace

*nettrace.TraceKey

*nistec.P224Point

*nistec.P256Point

*nistec.P384Point

*nistec.P521Point

*[15]*nistec.P224Point

*[4]uint64

*[15]*nistec.P384Point

*[15]*nistec.P521Point

*int

*norm.Iter

*norm.Properties

*norm.formInfo

*norm.input

*func(*norm.Iter) []uint8

*func(norm.input, int) norm.Properties

*uint8

*norm.reorderBuffer

*uint8

*os.File

*os.LinkError

*os.Process

*os.ProcessState

*os.Signal

*os.SyscallError

*os.dirInfo

*os.file

*os.fileStat

*os.fileWithoutReadFrom

*os.fileWithoutWriteTo

*os.noReadFrom

*os.noWriteTo

*os.rawConn

*os.timeout

*os.unixDirent

*parse.ActionNode

*parse.BoolNode

*parse.BranchNode

*parse.BreakNode

*parse.ChainNode

*parse.CommandNode

*parse.CommentNode

*parse.ContinueNode

*parse.DotNode

*parse.FieldNode

*parse.IdentifierNode

*parse.IfNode

*parse.ListNode

*uint

*parse.NilNode

*parse.Node

*int

*parse.NumberNode

*parse.PipeNode

*int

*parse.RangeNode

*parse.StringNode

*parse.TemplateNode

*parse.TextNode

*parse.Tree

*parse.VariableNode

*parse.WithNode

*parse.elseNode

*parse.endNode

*parse.item

*int

*parse.lexOptions

*parse.lexer

*pem.Block

*int

*pflag.Flag

*pflag.FlagSet

*string

*pflag.ParseErrorsWhitelist

*pflag.Value

*pflag.boolFlag

*pflag.boolSliceValue

*bool

*[]uint8

*[]uint8

*int

*pflag.durationSliceValue

*int64

*pflag.flagValueWrapper

*pflag.float32SliceValue

*float32

*pflag.float64SliceValue

*float64

*pflag.goBoolFlag

*int16

*pflag.int32SliceValue

*int32

*pflag.int64SliceValue

*int64

*int8

*pflag.intSliceValue

*int

*[]uint8

*pflag.ipNetValue

*pflag.ipSliceValue

*[]uint8

*pflag.stringArrayValue

*pflag.stringSliceValue

*pflag.stringToInt64Value

*pflag.stringToIntValue

*pflag.stringToStringValue

*string

*uint16

*uint32

*uint64

*uint8

*pflag.uintSliceValue

*uint

*pkix.AlgorithmIdentifier

*pkix.AttributeTypeAndValue

*pkix.CertificateList

*pkix.Extension

*pkix.Name

*[][]pkix.AttributeTypeAndValue

*[]pkix.AttributeTypeAndValue

*pkix.RevokedCertificate

*pkix.TBSCertificateList

*poll.DeadlineExceededError

*poll.FD

*string

*poll.SysFile

*poll.errNetClosing

*poll.fdMutex

*poll.pollDesc

*poll.splicePipe

*poll.splicePipeFields

*pool.Pool[*go.uber.org/zap.errArrayElem]

*pool.Pool[*go.uber.org/zap/buffer.Buffer]

*pool.Pool[*go.uber.org/zap/internal/stacktrace.Stack]

*pool.Pool[*go.uber.org/zap/zapcore.CheckedEntry]

*pool.Pool[*go.uber.org/zap/zapcore.errArrayElem]

*pool.Pool[*go.uber.org/zap/zapcore.jsonEncoder]

*pool.Pool[*go.uber.org/zap/zapcore.sliceArrayEncoder]

*pool.Pool[go.shape.*uint8]

*proxy.ContextDialer

*proxy.Dialer

*proxy.direct

*quotedprintable.Reader

*rand.Rand

*rand.Source

*rand.Source64

*rand.hideAgainReader

*rand.lockedSource

*rand.reader

*rand.rngSource

*rand.runtimeSource

*rc4.Cipher

*int

*realdebrid.ActiveTorrentCountResponse

*realdebrid.Alias

*realdebrid.Alias

*realdebrid.Alias

*realdebrid.Alias

*realdebrid.Download

*realdebrid.File

*realdebrid.HostInfo

*realdebrid.MagnetResponse

*realdebrid.RealDebrid

*realdebrid.Torrent

*realdebrid.TorrentInfo

*realdebrid.User

*int

*uint

*reflect.MapIter

*reflect.Method

*reflect.StructField

*string

*reflect.Type

*reflect.Value

*reflect.ValueError

*reflect.abiDesc

*reflect.abiSeq

*reflect.abiStep

*int

*reflect.bitVector

*reflect.cacheKey

*reflect.fieldScan

*uintptr

*reflect.hiter

*reflect.layoutKey

*reflect.layoutType

*reflect.makeFuncCtxt

*reflect.methodValue

*reflect.ptrType

*reflect.rtype

*reflect.sliceType

*reflect.structType

*reflect.structTypeUncommon

*reflect.visit

*reflect2.MapIterator

*reflect2.MapType

*reflect2.PtrType

*reflect2.SliceType

*reflect2.StructField

*reflect2.Type

*reflect2.UnsafeArrayType

*reflect2.UnsafeEFaceType

*reflect2.UnsafeIFaceType

*reflect2.UnsafeMapIterator

*reflect2.UnsafeMapType

*reflect2.UnsafePtrType

*reflect2.UnsafeSliceType

*reflect2.UnsafeStructField

*reflect2.UnsafeStructType

*reflect2.frozenConfig

*reflect2.hiter

*reflect2.safeField

*reflect2.safeMapIterator

*reflect2.safeMapType

*reflect2.safeSliceType

*reflect2.safeStructType

*reflect2.safeType

*reflect2.sliceHeader

*reflect2.unsafeType

*reflectlite.Type

*reflectlite.ValueError

*reflectlite.rtype

*regexp.Regexp

*regexp.bitState

*regexp.entry

*regexp.input

*regexp.inputBytes

*regexp.inputReader

*regexp.inputString

*regexp.inputs

*regexp.job

*uint64

*regexp.machine

*regexp.onePassInst

*regexp.onePassMachine

*regexp.onePassProg

*regexp.queue

*[]int32

*regexp.thread

*rsa.CRTValue

*rsa.OAEPOptions

*rsa.PKCS1v15DecryptOptions

*rsa.PSSOptions

*rsa.PrecomputedValues

*rsa.PrivateKey

*rsa.PublicKey

*runtime.Error

*runtime.Frame

*runtime.Frames

*runtime.Func

*runtime.PanicNilError

*runtime.TypeAssertionError

*runtime._defer

*runtime._func

*runtime._panic

*runtime._typePair

*runtime.addrRange

*runtime.ancestorInfo

*runtime.bitvector

*runtime.bmap

*runtime.boundsError

*uint8

*[32]uintptr

*runtime.coro

*runtime.cpuStats

*runtime.cpuStatsAggregate

*runtime.debugCallWrapArgs

*runtime.dlogPerM

*runtime.errorAddressString

*string

*runtime.funcInfo

*runtime.funcinl

*runtime.functab

*runtime.g

*runtime.gList

*runtime.gTraceState

*runtime.gcBgMarkWorkerNode

*runtime.gcBits

*int

*runtime.gcStatsAggregate

*runtime.gcWork

*uintptr

*runtime.gobuf

*uint32

*runtime.goroutineProfileStateHolder

*runtime.gsignalStack

*uintptr

*runtime.hchan

*runtime.heapStatsAggregate

*runtime.heapStatsDelta

*runtime.heldLockInfo

*runtime.hmap

*runtime.initTask

*runtime.itab

*runtime.lfnode

*runtime.libcall

*runtime.limiterEvent

*int

*runtime.lockRankStruct

*runtime.m

*runtime.mLockProfile

*runtime.mOS

*runtime.mSpanList

*runtime.mSpanStateBox

*runtime.mTraceState

*runtime.mapextra

*runtime.mcache

*runtime.metricData

*runtime.metricFloat64Histogram

*int

*func() uint64

*runtime.metricValue

*runtime.moduledata

*runtime.modulehash

*runtime.mspan

*uintptr

*runtime.mutex

*runtime.notInHeap

*runtime.note

*runtime.offAddr

*runtime.p

*runtime.pTraceState

*runtime.pageCache

*runtime.pageTraceBuf

*runtime.pcHeader

*runtime.pcvalueCache

*runtime.pcvalueCacheEnt

*runtime.persistentAlloc

*runtime.piController

*runtime.pinner

*string

*runtime.pollDesc

*runtime.ptabEntry

*uintptr

*runtime.savedOpenDeferState

*runtime.scavengerState

*[2]uint32

*[]uint8

*uint8

*runtime.special

*runtime.stack

*runtime.stackfreelist

*runtime.statAggregate

*[1]uint64

*string

*runtime.stringer

*runtime.sudog

*runtime.sysStatsAggregate

*runtime.sysmontick

*runtime.textsect

*uint32

*runtime.timer

*uint8

*runtime.traceBuf

*runtime.traceBufHeader

*runtime.traceSchedResourceState

*uint64

*uint16

*uint32

*uint64

*uint8

*runtime.waitq

*runtime.wbBuf

*runtime.workbuf

*runtime.workbufhdr

*sha1.digest

*sha256.digest

*sha512.digest

*singleflight.Group

*singleflight.Result

*singleflight.call

*socks.Addr

*int

*int

*socks.Conn

*socks.Dialer

*socks.UsernamePassword

*sort.Interface

*[]string

*stacktrace.Stack

*strconv.NumError

*string

*strings.Builder

*strings.Reader

*strings.Replacer

*[]uint8

*[256]uint8

*strings.byteStringReplacer

*strings.genericReplacer

*strings.replacer

*strings.singleStringReplacer

*strings.span

*strings.stringFinder

*strings.stringWriter

*strings.trieNode

*struct { Generated string "json:\"generated\""; *realdebrid.Alias }

*struct { Layout string "json:\"layout\" yaml:\"layout\"" }

*struct { Level *zapcore.Level "json:\"level\"" }

*struct { Progress float64 "json:\"progress\""; Added string "json:\"added\""; *realdebrid.Alias }

*struct { Progress float64 "json:\"progress\""; Added string "json:\"added\""; Ended string "json:\"ended\""; *realdebrid.Alias }

*struct { Progress float64 "json:\"progress\""; Added string "json:\"added\""; Ended string "json:\"ended\""; *realdebrid.Alias }

*struct { SelectedFilesJson json.RawMessage "json:\"SelectedFiles\""; DownloadedIDsJson json.RawMessage "json:\"DownloadedIDs\""; InProgressIDsJson json.RawMessage "json:\"InProgressIDs\""; UnassignedLinksJson json.RawMessage "json:\"UnassignedLinks\""; *torrent.Alias }

*struct { SelectedFilesJson json.RawMessage "json:\"SelectedFiles\""; DownloadedIDsJson json.RawMessage "json:\"DownloadedIDs\""; InProgressIDsJson json.RawMessage "json:\"InProgressIDs\""; UnassignedLinksJson json.RawMessage "json:\"UnassignedLinks\""; *torrent.Alias }

*struct { io.Reader; io.Closer }

*struct { io.Reader; io.WriterTo }

*struct { references int; anchor int; serialized bool }

*struct { runtime.gList; n int32 }

*struct { sync.Once; v *x509.Certificate }

*sync.Cond

*sync.Locker

*sync.Map

*sync.Mutex

*sync.Once

*sync.Pool

*sync.RWMutex

*sync.WaitGroup

*uintptr

*sync.eface

*sync.entry

*sync.noCopy

*sync.notifyList

*sync.poolChain

*sync.poolChainElt

*sync.poolDequeue

*sync.poolLocal

*sync.poolLocalInternal

*sync.readOnly

*sync.rlocker

*uint32

*uint8

*syntax.Error

*string

*uint16

*syntax.Inst

*uint8

*uint8

*syntax.Prog

*syntax.Regexp

*syntax.charGroup

*syntax.parser

*syntax.ranges

*sys.NotInHeap

*sys.nih

*syscall.Conn

*syscall.Credential

*uintptr

*syscall.IPMreq

*syscall.IPMreqn

*syscall.IPv6Mreq

*syscall.Iovec

*syscall.Linger

*syscall.NetlinkMessage

*syscall.NetlinkRouteAttr

*syscall.NlMsghdr

*syscall.RawConn

*syscall.RawSockaddrInet4

*syscall.RawSockaddrInet6

*syscall.RawSockaddrLinklayer

*syscall.RawSockaddrNetlink

*syscall.RawSockaddrUnix

*syscall.Rlimit

*syscall.RtAttr

*syscall.Rusage

*int

*syscall.Sockaddr

*syscall.SockaddrInet4

*syscall.SockaddrInet6

*syscall.SockaddrLinklayer

*syscall.SockaddrNetlink

*syscall.SockaddrUnix

*syscall.Stat_t

*syscall.SysProcAttr

*syscall.SysProcIDMap

*syscall.Timespec

*syscall.Timeval

*uint32

*uint32

*uint32

*template.ExecError

*map[string]interface {}

*template.Template

*template.common

*int

*template.missingValType

*template.option

*template.variable

*template.writeError

*testlog.Interface

*textproto.Error

*map[string][]string

*string

*textproto.Reader

*textproto.dotReader

*int64

*time.Location

*int

*time.ParseError

*time.Ticker

*time.Time

*time.Timer

*int

*string

*time.runtimeTimer

*time.zone

*time.zoneTrans

*uint8

*tls.Certificate

*tls.CertificateRequestInfo

*tls.CertificateVerificationError

*int

*tls.ClientHelloInfo

*tls.ClientSessionCache

*tls.ClientSessionState

*tls.Config

*tls.Conn

*tls.ConnectionState

*uint16

*int

*tls.QUICEvent

*int

*tls.RecordHeaderError

*int

*tls.SessionState

*uint16

*tls.activeCert

*tls.aead

*uint8

*tls.atLeastReader

*tls.binaryMarshaler

*tls.cacheEntry

*tls.cbcMode

*tls.certCache

*tls.certificateMsg

*tls.certificateMsgTLS13

*tls.certificateRequestMsg

*tls.certificateRequestMsgTLS13

*tls.certificateStatusMsg

*tls.certificateVerifyMsg

*tls.cipherSuite

*tls.cipherSuiteTLS13

*tls.clientHandshakeState

*tls.clientHelloMsg

*tls.clientKeyExchangeMsg

*tls.constantTimeHash

*tls.cthWrapper

*tls.ecdheKeyAgreement

*tls.encryptedExtensionsMsg

*tls.endOfEarlyDataMsg

*tls.finishedHash

*tls.finishedMsg

*tls.halfConn

*tls.handshakeMessage

*tls.helloRequestMsg

*tls.keyAgreement

*tls.keyShare

*tls.keyUpdateMsg

*tls.listener

*tls.newSessionTicketMsg

*tls.newSessionTicketMsgTLS13

*tls.permanentError

*tls.prefixNonceAEAD

*tls.pskIdentity

*tls.quicState

*tls.rsaKeyAgreement

*tls.serverHandshakeState

*tls.serverHelloDoneMsg

*tls.serverHelloMsg

*tls.serverKeyExchangeMsg

*tls.ticketKey

*tls.transcriptHash

*tls.xorNonceAEAD

*torrent.Alias

*torrent.Alias

*torrent.File

*torrent.LibraryState

*torrent.Torrent

*torrent.TorrentManager

*uint

*uint16

*uint32

*uint64

*uint8

*uintptr

*unicode.Range16

*unicode.Range32

*unicode.RangeTable

*universal.Downloader

*unsafe.Pointer

*unsafeheader.Slice

*unsafeheader.String

*url.Error

*string

*string

*url.URL

*url.Userinfo

*map[string][]string

*x509.CertPool

*x509.Certificate

*x509.CertificateInvalidError

*x509.ConstraintViolationError

*int

*x509.HostnameError

*int

*int

*int

*x509.OID

*int

*int

*x509.SystemRootsError

*x509.UnhandledCriticalExtension

*x509.UnknownAuthorityError

*x509.VerifyOptions

*x509.authKeyId

*x509.ecPrivateKey

*x509.lazyCert

*x509.pkcs1AdditionalRSAPrime

*x509.pkcs1PrivateKey

*x509.pkcs8

*x509.potentialParent

*x509.pssParameters

*x509.pubKeyEqual

*x509.rfc2821Mailbox

*[28]uint8

*xml.Attr

*[]uint8

*[]uint8

*xml.Decoder

*[]uint8

*xml.Encoder

*xml.EndElement

*xml.Marshaler

*xml.MarshalerAttr

*xml.Name

*xml.ProcInst

*xml.StartElement

*xml.SyntaxError

*xml.TagPathError

*xml.Token

*xml.TokenReader

*string

*xml.Unmarshaler

*xml.UnmarshalerAttr

*xml.UnsupportedTypeError

*int

*xml.fieldInfo

*xml.printer

*xml.stack

*xml.typeInfo

*yaml.IsZeroer

*uint32

*yaml.Marshaler

*yaml.Node

*uint32

*yaml.TypeError

*yaml.Unmarshaler

*yaml.decoder

*yaml.encoder

*yaml.fieldInfo

*[]reflect.Value

*yaml.obsoleteUnmarshaler

*yaml.parser

*yaml.resolveMapItem

*yaml.structInfo

*yaml.yamlError

*yaml.yaml_alias_data_t

*int

*yaml.yaml_comment_t

*yaml.yaml_document_t

*int

*yaml.yaml_emitter_t

*int

*int

*yaml.yaml_event_t

*int8

*int8

*yaml.yaml_mark_t

*int

*yaml.yaml_node_pair_t

*yaml.yaml_node_t

*int

*int

*yaml.yaml_parser_t

*func(*yaml.yaml_parser_t, []uint8) (int, error)

*int8

*int8

*yaml.yaml_simple_key_t

*int8

*yaml.yaml_tag_directive_t

*yaml.yaml_token_t

*int

*yaml.yaml_version_directive_t

*func(*yaml.yaml_emitter_t, []uint8) error

*zap.AtomicLevel

*zap.Logger

*zap.Option

*zap.Sink

*zap.SugaredLogger

*func(string, *bool) zapcore.Field

*func(string, *complex128) zapcore.Field

*func(string, *complex64) zapcore.Field

*func(string, *float32) zapcore.Field

*func(string, *float64) zapcore.Field

*func(string, *int16) zapcore.Field

*func(string, *int32) zapcore.Field

*func(string, *int64) zapcore.Field

*func(string, *int8) zapcore.Field

*func(string, *int) zapcore.Field

*func(string, *string) zapcore.Field

*func(string, *int64) zapcore.Field

*func(string, *time.Time) zapcore.Field

*func(string, *uint16) zapcore.Field

*func(string, *uint32) zapcore.Field

*func(string, *uint64) zapcore.Field

*func(string, *uint8) zapcore.Field

*func(string, *uint) zapcore.Field

*func(string, *uintptr) zapcore.Field

*func(string, []bool) zapcore.Field

*func(string, []complex128) zapcore.Field

*func(string, []complex64) zapcore.Field

*func(string, []error) zapcore.Field

*func(string, []float32) zapcore.Field

*func(string, []float64) zapcore.Field

*func(string, []zapcore.Field) zapcore.Field

*func(string, []int16) zapcore.Field

*func(string, []int32) zapcore.Field

*func(string, []int64) zapcore.Field

*func(string, []int8) zapcore.Field

*func(string, []int) zapcore.Field

*func(string, []string) zapcore.Field

*func(string, []int64) zapcore.Field

*func(string, []time.Time) zapcore.Field

*func(string, []uint16) zapcore.Field

*func(string, []uint32) zapcore.Field

*func(string, []uint64) zapcore.Field

*func(string, []uint8) zapcore.Field

*func(string, []uint) zapcore.Field

*func(string, []uintptr) zapcore.Field

*func(string, bool) zapcore.Field

*func(string, complex128) zapcore.Field

*func(string, complex64) zapcore.Field

*func(string, error) zapcore.Field

*func(string, float32) zapcore.Field

*func(string, float64) zapcore.Field

*func(string, fmt.Stringer) zapcore.Field

*func(string, zapcore.ArrayMarshaler) zapcore.Field

*func(string, zapcore.ObjectMarshaler) zapcore.Field

*func(string, int16) zapcore.Field

*func(string, int32) zapcore.Field

*func(string, int64) zapcore.Field

*func(string, int8) zapcore.Field

*func(string, int) zapcore.Field

*func(string, interface {}) zapcore.Field

*func(string, string) zapcore.Field

*func(string, int64) zapcore.Field

*func(string, time.Time) zapcore.Field

*func(string, uint16) zapcore.Field

*func(string, uint32) zapcore.Field

*func(string, uint64) zapcore.Field

*func(string, uint8) zapcore.Field

*func(string, uint) zapcore.Field

*func(string, uintptr) zapcore.Field

*[]bool

*[]complex128

*[]complex64

*[]zapcore.Field

*[]int64

*[]error

*zap.errArrayElem

*zap.errorResponse

*[]float32

*[]float64

*[]int16

*[]int32

*[]int64

*[]int8

*[]int

*zap.invalidPair

*[]zap.invalidPair

*zap.nopCloserSink

*func(*zap.Logger)

*zap.payload

*zap.sinkRegistry

*[]string

*[]time.Time

*[]uint16

*[]uint32

*[]uint64

*[]uintptr

*[]uint

*zapcore.ArrayEncoder

*zapcore.ArrayMarshaler

*func(zapcore.EntryCaller, zapcore.PrimitiveArrayEncoder)

*uint8

*zapcore.CheckWriteHook

*zapcore.CheckedEntry

*zapcore.Clock

*zapcore.Core

*func(int64, zapcore.PrimitiveArrayEncoder)

*zapcore.Encoder

*zapcore.EncoderConfig

*zapcore.Entry

*zapcore.EntryCaller

*zapcore.Field

*uint8

*int8

*zapcore.LevelEnabler

*func(int8, zapcore.PrimitiveArrayEncoder)

*zapcore.MapObjectEncoder

*func(string, zapcore.PrimitiveArrayEncoder)

*zapcore.ObjectEncoder

*zapcore.ObjectMarshaler

*zapcore.PrimitiveArrayEncoder

*zapcore.ReflectedEncoder

*func(time.Time, zapcore.PrimitiveArrayEncoder)

*zapcore.WriteSyncer

*zapcore.appendTimeEncoder

*zapcore.consoleEncoder

*[]error

*zapcore.errArrayElem

*zapcore.errorGroup

*zapcore.ioCore

*zapcore.jsonEncoder

*zapcore.lazyWithCore

*zapcore.leveledEnabler

*zapcore.lockedWriteSyncer

*[]zapcore.Core

*zapcore.nopCore

*zapcore.sliceArrayEncoder

*zapcore.systemClock

*zapcore.writerWrapper

<-chan *torrent.Torrent

<-chan bool

<-chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.File]

<-chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

<-chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]

<-chan cmap.Tuple[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]

<-chan cmap.Tuple[string,string]

<-chan error

<-chan exec.ctxResult

<-chan *torrent.Torrent

<-chan int

<-chan string

<-chan int

<-chan singleflight.Result

<-chan string

<-chan struct {}

<-chan time.Time

[0]*godebug.value

[0]*http.response

[0]*interface {}

[0]*runtime.PanicNilError

[0]*string

[0]*sync.readOnly

[0]func()

[1024]uint8

[108]int8

[10]runtime.heldLockInfo

[10]uint8

[124]uintptr

[127]uintptr

[128]*runtime.mspan

[128]*runtime.sudog

[128][4]uint64

[128]uint8

[12]uint8

[132][15]*nistec.P521Point

[132]uintptr

[133]uint8

[136]*runtime.mspan

[13]uint8

[13]uintptr

[14]int8

[14]uint8

[15]uint64

[15]uint8

[16384]uint8

[16]cipher.gcmFieldElement

[16]uint64

[16]uint8

[16]uintptr

[172]uint8

[17]int32

[18]uint8

[19]int

[19]uint8

[1]*cobra.Command

[1]*syntax.Regexp

[1]*x509.Certificate

[1][]*x509.Certificate

[1][]int32

[1][]uint8

[1]uint

[1]chan<- singleflight.Result

[1]httpproxy.matcher

[1]int

[1]interface {}

[1]net.Addr

[1]net.IPAddr

[1]pkix.AttributeTypeAndValue

[1]string

[1]template.variable

[1]time.zone

[1]time.zoneTrans

[1]uint16

[1]tls.keyShare

[1]tls.pskIdentity

[1]tls.ticketKey

[1]uint32

[1]uint8

[1]uintptr

[1]unsafe.Pointer

[1]int

[1]zapcore.Field

[2048]uint8

[24]uint8

[253]uintptr

[255]uint8

[256]*hpack.node

[256][]uint8

[256]hpack.node

[256]int

[256]uintptr

[256]uint32

[256]uint8

[28]uint8

[29]uint8

[2]*runtime.traceBuf

[2][8]runtime.pcvalueCacheEnt

[2]asn1.encoder

[2]error

[2]int

[2]int

[2]int32

[2]interface {}

[2]map[string]interface {}

[2]runtime.Frame

[2]int

[2]uint64

[2]uint8

[2]uintptr

[2]zapcore.Core

[30]uint8

[316]int

[32768]uint8

[32]*runtime._defer

[32]norm.Properties

[32]uint64

[32]uint8

[32]uintptr

[33]uint8

[3]atomic.Uint32

[3]int64

[3]parse.item

[3]string

[3]uint16

[3]uint8

[4096]uint8

[42]cpu.option

[48]uint8

[49]uint8

[4][]*chi.node

[4]runtime.stackfreelist

[4]uint16

[4]uint32

[4]uint64

[4]uint8

[4]uintptr

[50]uint8

[512]uint32

[512]uint8

[512]uintptr

[54]uint8

[56][15]*nistec.P224Point

[57]uint8

[5]http.http2Setting

[5]string

[5]uint32

[5]uint8

[5]uintptr

[5]unsafe.Pointer

[607]int64

[64]uint8

[65504]uint8

[65]uint8

[66]uint8

[67]uint8

[68]uint64

[68]uint8

[6]cpu.option

[6]uintptr

[7]uint16

[7]uint64

[7]uintptr

[8192]uint8

[8]runtime.pcvalueCacheEnt

[8]tls.QUICEvent

[8]uint32

[8]uint64

[8]uint8

[96]fiat.P224Element

[96][15]*nistec.P384Point

[96]uint8

[97]uint8

[9]uint8

[9]uintptr

[9]unsafe.Pointer

[]*abi.Type

[]*big.Int

[]*chi.endpoint

[]*cmap.ConcurrentMapShared[go.shape.string,go.shape.*uint8]

[]*cmap.ConcurrentMapShared[go.shape.string,go.shape.string]

[]*cmap.ConcurrentMapShared[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }]

[]*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.File]

[]*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

[]*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]

[]*cmap.ConcurrentMapShared[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]

[]*cmap.ConcurrentMapShared[string,string]

[]*cobra.Command

[]*cobra.Group

[]*config.Directory

[]*config.FilterConditionsV1

[]*flag.Flag

[]*flag.FlagSet

[]*godebug.value

[]*hpack.node

[]*http.Cookie

[]*http.Request

[]*http.conn

[]*http.http2ClientConn

[]*http.http2addConnCall

[]*http.http2clientStream

[]*http.http2dialCall

[]*http.http2priorityNode

[]*http.http2serverConn

[]*http.http2stream

[]*http.http2writeQueue

[]*http.pattern

[]*http.persistConn

[]*http.response

[]*http.routingNode

[]*http.wantConn

[]*interface {}

[]*intern.Value

[]*json.field

[]*jsoniter.Binding

[]*jsoniter.structFieldDecoder

[]*list.Element

[]*multipart.FileHeader

[]*net.IPNet

[]*net.Listener

[]*net.MX

[]*net.NS

[]*net.SRV

[]*nistec.P224Point

[]*nistec.P384Point

[]*nistec.P521Point

[]*os.File

[]*parse.CommandNode

[]*parse.Tree

[]*parse.VariableNode

[]*pflag.Flag

[]*realdebrid.Download

[]*reflect.structType

[]*regexp.thread

[]*runtime.PanicNilError

[]*runtime._defer

[]*runtime.bmap

[]*runtime.initTask

[]*runtime.itab

[]*runtime.moduledata

[]*runtime.mspan

[]*runtime.sudog

[]*runtime.timer

[]*runtime.traceBuf

[]*singleflight.call

[]*string

[]*strings.trieNode

[]*sync.entry

[]*sync.readOnly

[]*syntax.Regexp

[]*template.Template

[]*tls.Certificate

[]*tls.activeCert

[]*torrent.File

[]*torrent.Torrent

[]*unicode.RangeTable

[]*url.URL

[]*x509.Certificate

[]*yaml.Node

[]*yaml.structInfo

[][32]uint8

[][4]uint64

[][8]runtime.pcvalueCacheEnt

[][8]uint8

[][]*abi.Type

[][]*http.Cookie

[][]*http.http2ClientConn

[][]*http.pattern

[][]*http.persistConn

[][]*multipart.FileHeader

[][]*x509.Certificate

[][][]uint8

[][]int

[][]int32

[][]net.nssSource

[][]string

[][]uint32

[][]uint8

[]abi.Imethod

[]abi.Method

[]abi.StructField

[]int32

[]ants.worker

[][]int

[]asn1.RawValue

[]asn1.encoder

[]atomic.Uint32

[]uint

[]bisect.cond

[]bool

[]chan cmap.Tuple[go.shape.string,go.shape.*uint8]

[]chan cmap.Tuple[go.shape.string,go.shape.string]

[]chan cmap.Tuple[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }]

[]chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.File]

[]chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

[]chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]

[]chan cmap.Tuple[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]

[]chan cmap.Tuple[string,string]

[]chan struct {}

[]chan<- singleflight.Result

[]chi.Route

[]map[uint]*chi.endpoint

[]uint

[][]*chi.node

[]cipher.gcmFieldElement

[]cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

[]uint8

[]complex128

[]complex64

[]context.canceler

[]cpu.option

[]cpu.option

[][256]uint32

[]uint

[]uint16

[]dnsmessage.Option

[]uint16

[]dnsmessage.Resource

[]uint16

[]uint8

[]error

[]fiat.P224Element

[]flate.hcode

[]flate.literalNode

[]float32

[]float64

[]fs.DirEntry

[]fs.FileInfo

[]func()

[]func() error

[]func(*cobra.Command, []string, string) ([]string, int)

[]func(*http.Server, *tls.Conn, http.Handler)

[]func(*url.URL) (zap.Sink, error)

[]func(*url.URL, proxy.Dialer) (proxy.Dialer, error)

[]func(error)

[]func(http.Handler) http.Handler

[]func(string, *tls.Conn) http.RoundTripper

[]func(zapcore.EncoderConfig) (zapcore.Encoder, error)

[]*torrent.Torrent

[]*uint8

[]int

[]string

[]go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }

[]hpack.HeaderField

[]hpack.node

[]hpack.pairNameValue

[]int

[]http.Handler

[]http.RoundTripper

[]http.cancelKey

[]http.connectMethodKey

[]http.entry[string,*net/http.routingNode]

[]uint32

[]uint8

[]uint8

[]http.http2FrameWriteRequest

[]http.http2Setting

[]uint16

[]func(*http.http2frameCache, http.http2FrameHeader, func(string), []uint8) (http.http2Frame, error)

[]http.http2unstartedHandler

[]http.keyValues

[]http.muxEntry

[]http.routingIndexKey

[]http.segment

[]int

[]http.wantConnQueue

[]httpproxy.matcher

[]int

[]int16

[]int32

[]int64

[]int8

[]interface {}

[]intern.key

[]io.Closer

[]io.Reader

[]json.field

[]json.reflectWithString

[]jsoniter.Any

[]jsoniter.Extension

[]jsoniter.ValDecoder

[]jsoniter.ValEncoder

[]jsoniter.structFieldTo

[]map[uint8]string

[]map[string]bool

[]map[string]int

[]map[string]interface {}

[]map[string]string

[]net.Addr

[][]uint8

[]net.IPAddr

[]int8

[]net.byName

[]int

[]net.ipAttr

[]net.nssCriterion

[]net.nssSource

[]netip.Addr

[][15]*nistec.P224Point

[][15]*nistec.P384Point

[][15]*nistec.P521Point

[]norm.Properties

[]parse.Node

[]parse.item

[]int

[]string

[]pkix.AttributeTypeAndValue

[]pkix.Extension

[]pkix.RevokedCertificate

[]realdebrid.Download

[]realdebrid.File

[]realdebrid.HostInfo

[]realdebrid.Torrent

[]uint

[]reflect.Type

[]reflect.Value

[]reflect.abiStep

[]reflect.visit

[]reflect2.Type

[]regexp.entry

[]regexp.job

[]regexp.onePassInst

[]rsa.CRTValue

[]runtime.Frame

[]runtime._typePair

[]runtime.ancestorInfo

[]runtime.functab

[]uintptr

[]runtime.heldLockInfo

[]runtime.metricData

[]runtime.modulehash

[]runtime.pcvalueCacheEnt

[]runtime.ptabEntry

[]runtime.stackfreelist

[]runtime.textsect

[]int

[]string

[]struct {}

[]sync.eface

[]syntax.Inst

[]syntax.charGroup

[]syscall.Iovec

[]syscall.SysProcIDMap

[]template.variable

[]int64

[]time.Time

[]time.zone

[]time.zoneTrans

[]tls.Certificate

[]uint16

[]tls.QUICEvent

[]uint16

[]uint8

[]tls.keyShare

[]tls.pskIdentity

[]tls.ticketKey

[]uint

[]uint16

[]uint32

[]uint64

[]uint8

[]uintptr

[]unicode.Range16

[]unicode.Range32

[]unsafe.Pointer

[]int

[]x509.OID

[]x509.lazyCert

[]x509.pkcs1AdditionalRSAPrime

[][28]uint8

[]xml.Attr

[]xml.Name

[]xml.fieldInfo

[]yaml.fieldInfo

[]yaml.resolveMapItem

[]yaml.yaml_alias_data_t

[]yaml.yaml_comment_t

[]int

[]yaml.yaml_event_t

[]yaml.yaml_mark_t

[]int

[]yaml.yaml_node_pair_t

[]yaml.yaml_node_t

[]int

[]yaml.yaml_simple_key_t

[]yaml.yaml_tag_directive_t

[]yaml.yaml_token_t

[]zap.Option

[]zapcore.Core

[]zapcore.Field

[]int8

type abi.ArrayType struct {
	abi.Type
	Elem  *abi.Type
	Slice *abi.Type
	Len   uintptr
}

int

uint8

uint8

type abi.FuncType struct {
	abi.Type
	InCount  uint16
	OutCount uint16
}

type abi.Imethod struct {
	Name int32
	Typ  int32
}

[2]uint8

type abi.InterfaceType struct {
	abi.Type
	PkgPath abi.Name
	Methods []abi.Imethod
}

uint

type abi.MapType struct{
	abi.Type
	Key *<nil>
	Elem *<nil>
	Bucket *<nil>
	Hasher func(unsafe.Pointer, uintptr) uintptr
	KeySize uint8
	ValueSize uint8
	BucketSize uint16
	Flags uint32
}

type abi.Method struct {
	Name int32
	Mtyp int32
	Ifn  int32
	Tfn  int32
}

type abi.Name struct {
	Bytes *uint8
}

int32

type abi.PtrType struct {
	abi.Type
	Elem *abi.Type
}

type abi.RegArgs struct {
	Ints        [9]uintptr
	Floats      [15]uint64
	Ptrs        [9]unsafe.Pointer
	ReturnIsPtr [2]uint8
}

type abi.SliceType struct {
	abi.Type
	Elem *abi.Type
}

type abi.StructField struct{
	Name abi.Name
	Typ *<nil>
	Offset uintptr
}

type abi.StructType struct {
	abi.Type
	PkgPath abi.Name
	Fields  []abi.StructField
}

uint8

int32

type abi.Type struct {
	Size_       uintptr
	PtrBytes    uintptr
	Hash        uint32
	TFlag       uint8
	Align_      uint8
	FieldAlign_ uint8
	Kind_       uint8
	Equal       func(unsafe.Pointer, unsafe.Pointer) bool
	GCData      *uint8
	Str         int32
	PtrToThis   int32
}

int32

int

type ants.Options struct {
	ExpiryDuration   int64
	PreAlloc         bool
	MaxBlockingTasks int
	Nonblocking      bool
	PanicHandler     func(interface{})
	Logger           ants.Logger
	DisablePurge     bool
}

type asn1.BitString struct {
	Bytes     []uint8
	BitLength int
}

int

bool

[]int

[]uint8

type asn1.RawValue struct {
	Class      int
	Tag        int
	IsCompound bool
	Bytes      []uint8
	FullBytes  []uint8
}

type asn1.StructuralError struct {
	Msg string
}

type asn1.SyntaxError struct {
	Msg string
}

uint8

type asn1.bitStringEncoder struct {
	Bytes     []uint8
	BitLength int
}

uint8

[]uint8

int64

type asn1.invalidUnmarshalError struct {
	Type reflect.Type
}

[]asn1.encoder

[]int

[]asn1.encoder

string

type atomic.align64 struct{}

type atomic.align64 struct{}

type atomic.noCopy struct{}

type atomic.noCopy struct{}

int64

int8

uint8

uint

type big.byteReader struct {
	fmt.ScanState
}

uint8

[]uint

uint

bool

type boring.PrivateKeyECDH struct{}

type boring.PublicKeyECDH struct{}

type bufio.ReadWriter struct {
	*bufio.Reader
	*bufio.Writer
}

int8

chan *torrent.Torrent

chan bool

chan cmap.Tuple[go.shape.string,go.shape.*uint8]

chan cmap.Tuple[go.shape.string,go.shape.string]

chan cmap.Tuple[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }]

chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.File]

chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]

chan cmap.Tuple[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]

chan cmap.Tuple[string,string]

chan error

chan exec.ctxResult

chan exec.goroutineStatus

chan func()

chan *torrent.Torrent

chan int

chan string

chan http.http2FrameWriteRequest

chan http.http2bodyReadMsg

chan http.http2frameWriteResult

chan http.http2readFrameResult

chan http.readResult

chan http.requestAndChan

chan http.responseAndError

chan http.writeRequest

chan int

chan interface {}

chan net.dialResult

chan net.result

chan net.result[[]net.IPAddr]

chan net.result[[]string]

chan net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource]

chan net.result[go.shape.[]net.IPAddr]

chan net.result[go.shape.[]string]

chan net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource]

chan net.result[go.shape.int]

chan net.result[int]

chan realdebrid.HostInfo

chan singleflight.Result

chan string

chan struct {}

chan time.Time

chan<- *torrent.Torrent

chan<- error

chan<- exec.ctxResult

chan<- *torrent.Torrent

chan<- int

chan<- string

chan<- int

chan<- realdebrid.HostInfo

chan<- singleflight.Result

chan<- string

chan<- struct {}

[]func(http.Handler) http.Handler

type chi.Route struct {
	SubRoutes chi.Routes
	Handlers  map[string]http.Handler
	Pattern   string
}

type chi.RouteParams struct {
	Keys   []string
	Values []string
}

map[uint]*chi.endpoint

uint

uint8

[]*chi.node

type cipher.StreamReader struct {
	S cipher.Stream
	R io.Reader
}

func(string, *torrent.File)

func(string, *torrent.Torrent)

func(string, *realdebrid.Download)

func(string, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent])

func(string, string)

func(string, *torrent.File, bool) bool

func(string, *torrent.Torrent, bool) bool

func(string, *realdebrid.Download, bool) bool

func(string, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent], bool) bool

func(string, string, bool) bool

type cmap.Tuple[go.shape.string, go.shape. *uint8] struct {
	Key string
	Val *uint8
}

type cmap.Tuple[go.shape.string,go.shape.string] struct{
	Key string
	Val string
}

type cmap.Tuple[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }] struct{
	Key string
	Val go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }
}

type cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.File] struct{
	Key string
	Val *torrent.File
}

type cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent] struct{
	Key string
	Val *torrent.Torrent
}

type cmap.Tuple[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download] struct{
	Key string
	Val *realdebrid.Download
}

type cmap.Tuple[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]] struct{
	Key string
	Val cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
}

type cmap.Tuple[string,string] struct{
	Key string
	Val string
}

func(bool, *torrent.File, *torrent.File) *torrent.File

func(bool, *torrent.Torrent, *torrent.Torrent) *torrent.Torrent

func(bool, *realdebrid.Download, *realdebrid.Download) *realdebrid.Download

func(bool, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent], cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

func(bool, string, string) string

type cobra.CompletionOptions struct {
	DisableDefaultCmd   bool
	DisableNoDescFlag   bool
	DisableDescriptions bool
	HiddenDefaultCmd    bool
}

type cobra.FParseErrWhitelist struct {
	UnknownFlags bool
}

type cobra.Group struct {
	ID    string
	Title string
}

func(*cobra.Command, []string) error

int

[]*cobra.Command

uint8

complex128

complex64

type concurrent.Map struct {
	sync.Map
}

type config.Directory struct {
	GroupOrder               int                             `yaml:"group_order"`
	Group                    string                          `yaml:"group"`
	Filters                  []*config.FilterConditionsV1 `yaml:"filters"`
	OnlyShowTheBiggestFile   bool                            `yaml:"only_show_the_biggest_file"`
	OnlyShowFilesWithSizeLte int64                           `yaml:"only_show_files_with_size_lte"`
	OnlyShowFilesWithSizeGte int64                           `yaml:"only_show_files_with_size_gte"`
}

type config.FilterConditionsV1 struct{
	ID string	`yaml:"id"`
	RegexStr string	`yaml:"regex"`
	Contains string	`yaml:"contains"`
	ContainsStrict string	`yaml:"contains_strict"`
	NotRegexStr string	`yaml:"not_regex"`
	NotContains string	`yaml:"not_contains"`
	NotContainsStrict string	`yaml:"not_contains_strict"`
	SizeGreaterThanOrEqual int64	`yaml:"size_gte"`
	SizeLessThanOrEqual int64	`yaml:"size_lte"`
	And []<nil>	`yaml:"and"`
	Or []<nil>	`yaml:"or"`
	FileInsideRegexStr string	`yaml:"any_file_inside_regex"`
	FileInsideContains string	`yaml:"any_file_inside_contains"`
	FileInsideContainsStrict string	`yaml:"any_file_inside_contains_strict"`
	FileInsideNotRegexStr string	`yaml:"any_file_inside_not_regex"`
	FileInsideNotContains string	`yaml:"any_file_inside_not_contains"`
	FileInsideNotContainsStrict string	`yaml:"any_file_inside_not_contains_strict"`
	FileInsideSizeGreaterThanOrEqual int64	`yaml:"any_file_inside_size_gte"`
	FileInsideSizeLessThanOrEqual int64	`yaml:"any_file_inside_size_lte"`
	HasEpisodes bool	`yaml:"has_episodes"`
}

type config.ZurgConfig struct {
	Version                    string   `yaml:"zurg" json:"-"`
	Token                      string   `yaml:"token" json:"-"`
	ApiTimeoutSecs             int      `yaml:"api_timeout_secs" json:"api_timeout_secs"`
	CanRepair                  bool     `yaml:"enable_repair" json:"enable_repair"`
	DeleteRarFiles             bool     `yaml:"auto_delete_rar_torrents" json:"auto_delete_rar_torrents"`
	DownloadMount              bool     `yaml:"enable_download_mount" json:"enable_download_mount"`
	DownloadsEveryMins         int      `yaml:"downloads_every_mins" json:"downloads_every_mins"`
	DownloadTimeoutSecs        int      `yaml:"download_timeout_secs" json:"download_timeout_secs"`
	ForceIPv6                  bool     `yaml:"force_ipv6" json:"force_ipv6"`
	Host                       string   `yaml:"host" json:"host"`
	IgnoreRenames              bool     `yaml:"ignore_renames" json:"ignore_renames"`
	NetworkBufferSize          int      `yaml:"network_buffer_size" json:"network_buffer_size"`
	NumOfWorkers               int      `yaml:"concurrent_workers" json:"concurrent_workers"`
	OnLibraryUpdate            string   `yaml:"on_library_update" json:"on_library_update"`
	Password                   string   `yaml:"password" json:"password"`
	PlayableExtensions         []string `yaml:"addl_playable_extensions" json:"addl_playable_extensions"`
	Port                       string   `yaml:"port" json:"port"`
	Proxy                      string   `yaml:"proxy" json:"proxy"`
	RateLimitSleepSecs         int      `yaml:"rate_limit_sleep_secs" json:"rate_limit_sleep_secs"`
	RefreshEverySecs           int      `yaml:"check_for_changes_every_secs" json:"check_for_changes_every_secs"`
	RepairEveryMins            int      `yaml:"repair_every_mins" json:"repair_every_mins"`
	RetainFolderNameExtension  bool     `yaml:"retain_folder_name_extension" json:"retain_folder_name_extension"`
	RetainRDTorrentName        bool     `yaml:"retain_rd_torrent_name" json:"retain_rd_torrent_name"`
	RetriesUntilFailed         int      `yaml:"retries_until_failed" json:"retries_until_failed"`
	ServeFromRclone            bool     `yaml:"serve_from_rclone" json:"serve_from_rclone"`
	Username                   string   `yaml:"username" json:"username"`
	TorrentsCount              int      `yaml:"get_torrents_count" json:"get_torrents_count"`
	APIRateLimitPerMinute      int      `yaml:"api_rate_limit_per_minute" json:"api_rate_limit_per_minute"`
	TorrentsRateLimitPerMinute int      `yaml:"torrents_rate_limit_per_minute" json:"torrents_rate_limit_per_minute"`
}

func()

type context.deadlineExceededError struct{}

type context.emptyCtx struct{}

type cpu.option struct {
	Name      string
	Feature   *bool
	Specified bool
	Enable    bool
	Required  bool
}

type cpu.option struct {
	Name      string
	Feature   *bool
	Specified bool
	Enable    bool
}

[256]uint32

[8][256]uint32

uint

type cryptobyte.BuildError struct {
	Err error
}

type csv.ParseError struct {
	StartLine int
	Line      int
	Column    int
	Err       error
}

int

type dnsmessage.AAAAResource struct {
	AAAA [16]uint8
}

type dnsmessage.AResource struct {
	A [4]uint8
}

type dnsmessage.CNAMEResource struct {
	CNAME dnsmessage.Name
}

uint16

type dnsmessage.MXResource struct {
	Pref uint16
	MX   dnsmessage.Name
}

type dnsmessage.NSResource struct {
	NS dnsmessage.Name
}

type dnsmessage.Name struct {
	Data   [255]uint8
	Length uint8
}

type dnsmessage.OPTResource struct {
	Options []dnsmessage.Option
}

type dnsmessage.Option struct {
	Code uint16
	Data []uint8
}

type dnsmessage.PTRResource struct {
	PTR dnsmessage.Name
}

uint16

type dnsmessage.Resource struct {
	Header dnsmessage.ResourceHeader
	Body   dnsmessage.ResourceBody
}

type dnsmessage.ResourceHeader struct {
	Name   dnsmessage.Name
	Type   uint16
	Class  uint16
	TTL    uint32
	Length uint16
}

type dnsmessage.SOAResource struct {
	NS      dnsmessage.Name
	MBox    dnsmessage.Name
	Serial  uint32
	Refresh uint32
	Retry   uint32
	Expire  uint32
	MinTTL  uint32
}

type dnsmessage.SRVResource struct {
	Priority uint16
	Weight   uint16
	Port     uint16
	Target   dnsmessage.Name
}

type dnsmessage.TXTResource struct {
	TXT []string
}

uint16

type dnsmessage.UnknownResource struct {
	Type uint16
	Data []uint8
}

uint8

type dsa.Parameters struct {
	P *big.Int
	Q *big.Int
	G *big.Int
}

type dsa.PublicKey struct {
	dsa.Parameters
	Y *big.Int
}

type ecdh.x25519Curve struct{}

type ecdsa.PrivateKey struct {
	ecdsa.PublicKey
	D *big.Int
}

type ecdsa.PublicKey struct {
	elliptic.Curve
	X *big.Int
	Y *big.Int
}

type ecdsa.zr struct{}

type ed25519.Options struct {
	Hash    uint
	Context string
}

[]uint8

[]uint8

[0]func()

type elliptic.CurveParams struct {
	P       *big.Int
	N       *big.Int
	B       *big.Int
	Gx      *big.Int
	Gy      *big.Int
	BitSize int
	Name    string
}

type error interface {
	Error() string
}
type exec.Error struct {
	Name string
	Err  error
}

type exec.ExitError struct {
	*os.ProcessState
	Stderr []uint8
}

[4]uint64

[6]uint64

[9]uint64

int

type flag.Flag struct {
	Name     string
	Usage    string
	Value    flag.Value
	DefValue string
}

func(string) error

bool

int64

float64

func(string) error

int64

int

string

uint64

uint

int64

string

[]flate.literalNode

[]flate.literalNode

float32

float64

[]uint8

string

type fmtsort.SortedMap struct {
	Key   []reflect.Value
	Value []reflect.Value
}

uint32

type fs.PathError struct {
	Op   string
	Path string
	Err  error
}

func()

func() (*boring.PublicKeyECDH, error)

func() (*cobra.Command, error)

func() (*ecdh.PrivateKey, error)

func() (*ecdh.PublicKey, error)

func() (*hpack.Encoder, *bytes.Buffer)

func() (*multipart.Part, error)

func() (*multipart.Reader, error)

func() (*net.TCPConn, error)

func() (*net.UnixConn, error)

func() (*os.File, error)

func() (*os.ProcessState, error)

func() (*torrent.Torrent, bool)

func() (*url.URL, error)

func() (*x509.Certificate, error)

func() ([]dnsmessage.Resource, error)

func() ([]net.IPAddr, error)

func() ([]string, error)

func() ([]uint8, *tls.SessionState, error)

func() ([]uint8, bool, error)

func() ([]uint8, error)

func() (bool, error)

func() (float32, int8)

func() (float32, bool)

func() (float64, int8)

func() (float64, bool)

func() (float64, error)

func() (fs.FileInfo, error)

func() ([]net.IPAddr, error)

func() ([]string, error)

func() ([]dnsmessage.Resource, error)

func() (int, error)

func() (http.http2Frame, error)

func() (http.http2FrameWriteRequest, bool)

func() (int, bool)

func() (int, error)

func() (int, int)

func() (int, int, int)

func() (int, string, error)

func() (int, syscall.Sockaddr, string, error)

func() (int, int, int)

func() (int32, int, error)

func() (int64, int8)

func() (int64, error)

func() (int64, int64)

func() (interface {}, error)

func() (interface {}, interface {})

func() (io.ReadCloser, error)

func() (io.ReaderAt, int64, int64)

func() (io.WriteCloser, error)

func() (multipart.File, error)

func() (net.Conn, *bufio.ReadWriter, error)

func() (net.Conn, error)

func() (reflect.Value, bool)

func() (runtime.Frame, bool)

func() (string, bool)

func() (string, error)

func() (string, int)

func() (string, string, bool)

func() (syscall.RawConn, error)

func() (map[string][]string, error)

func() (time.Time, bool)

func() (time.Time, time.Time)

func() (uint32, error)

func() (uint64, int8)

func() (uint64, bool)

func() (uint8, error)

func() (unsafe.Pointer, uint32, error)

func() (unsafe.Pointer, unsafe.Pointer)

func() (xml.Token, error)

func() *abi.ArrayType

func() *abi.FuncType

func() *abi.InterfaceType

func() *abi.MapType

func() *abi.StructType

func() *abi.Type

func() *abi.UncommonType

func() *big.Float

func() *big.Int

func() *bigmod.Nat

func() *bisect.dedup

func() *buffer.Buffer

func() *cobra.Command

func() *ecdh.PublicKey

func() *elliptic.CurveParams

func() *fiat.P224Element

func() *fiat.P384Element

func() *fiat.P521Element

func() *godebug.value

func() *http.Transport

func() *http.http2Framer

func() *http.response

func() *interface {}

func() *jsoniter.Iterator

func() *list.Element

func() *list.List

func() *mapset.Iterator[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

func() *mapset.Iterator[int]

func() *mapset.Iterator[string]

func() *nistec.P224Point

func() *nistec.P256Point

func() *nistec.P384Point

func() *nistec.P521Point

func() *parse.ListNode

func() *parse.PipeNode

func() *parse.Tree

func() *pflag.FlagSet

func() *poll.FD

func() *reflect.MapIter

func() *regexp.Regexp

func() *runtime._defer

func() *stacktrace.Stack

func() *string

func() *sync.readOnly

func() *time.Location

func() *tls.Config

func() *x509.CertPool

func() *zap.Logger

func() *zap.SugaredLogger

func() *zap.errArrayElem

func() *zapcore.CheckedEntry

func() *zapcore.errArrayElem

func() *zapcore.jsonEncoder

func() *zapcore.sliceArrayEncoder

func() <-chan *torrent.Torrent

func() <-chan bool

func() <-chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.File]

func() <-chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

func() <-chan cmap.Tuple[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]

func() <-chan cmap.Tuple[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]

func() <-chan cmap.Tuple[string,string]

func() <-chan int

func() <-chan string

func() <-chan struct {}

func() [16]uint8

func() [2]uintptr

func() [4]uint8

func() []*abi.Type

func() []*cobra.Command

func() []*cobra.Group

func() []*http.Cookie

func() []*torrent.Torrent

func() [][]uint8

func() []abi.Method

func() []uint

func() []chi.Route

func() []error

func() []hpack.HeaderField

func() []int

func() []reflect.Value

func() []string

func() []uint8

func() int

func() uint

func() ants.worker

func() uint8

func() int8

func() uint8

func() uint

func() bool

func() []func(http.Handler) http.Handler

func() complex128

func() config.ZurgConfig

func() context.Context

func() uint

func() crypto.PublicKey

func() uint16

func() ecdh.Curve

func() error

func() int

func() float32

func() float64

func() uint32

func() func(*cobra.Command) error

func() func(*cobra.Command, []string)

func() func(*cobra.Command, error) error

func() func(*pflag.FlagSet, string) string

func() *uint8

func() hash.Hash

func() func(http.ResponseWriter, *http.Request)

func() map[string][]string

func() http.http2ClientConnState

func() http.http2FrameHeader

func() http.http2WriteScheduler

func() int

func() int16

func() int32

func() int64

func() int8

func() interface {}

func() io.Reader

func() io.Writer

func() string

func() jsoniter.API

func() jsoniter.Any

func() jsoniter.IteratorPool

func() jsoniter.StreamPool

func() int

func() map[string]*realdebrid.Download

func() map[string]*torrent.File

func() map[string]*torrent.Torrent

func() map[string][]string

func() map[string]cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

func() map[string]string

func() mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

func() mapset.Set[int]

func() mapset.Set[string]

func() net.Addr

func() net.Conn

func() []uint8

func() []uint8

func() netip.Addr

func() netip.AddrPort

func() netip.Prefix

func() parse.Node

func() int

func() int

func() [][]pkix.AttributeTypeAndValue

func() string

func() int

func() uint

func() string

func() reflect.Type

func() reflect.Value

func() reflect2.Type

func() reflectlite.Type

func() uint32

func() string

func() sync.Locker

func() uint8

func() int

func() int64

func() int

func() time.Time

func() int

func() tls.ConnectionState

func() uint

func() uint16

func() uint32

func() uint64

func() uint8

func() uintptr

func() unsafe.Pointer

func() map[string][]string

func() []uint8

func() []uint8

func() []uint8

func() xml.EndElement

func() xml.ProcInst

func() xml.StartElement

func() zapcore.Core

func() zapcore.Encoder

func() int8

func(*[][]uint8) (int64, error)

func(*[]bool, string, []bool, string)

func(*[]bool, string, string, []bool, string)

func(*[]float32, string, []float32, string)

func(*[]float32, string, string, []float32, string)

func(*[]float64, string, []float64, string)

func(*[]float64, string, string, []float64, string)

func(*[]int, string, []int, string)

func(*[]int, string, string, []int, string)

func(*[]int32, string, []int32, string)

func(*[]int32, string, string, []int32, string)

func(*[]int64, string, []int64, string)

func(*[]int64, string, string, []int64, string)

func(*[][]uint8, string, [][]uint8, string)

func(*[][]uint8, string, string, [][]uint8, string)

func(*[]string, string, []string, string)

func(*[]string, string, string, []string, string)

func(*[]int64, string, []int64, string)

func(*[]int64, string, string, []int64, string)

func(*[]uint, string, []uint, string)

func(*[]uint, string, string, []uint, string)

func(*[]uint8, string, []uint8, string)

func(*[]uint8, string, string, []uint8, string)

func(*big.Float) *big.Float

func(*big.Float) int

func(*big.Float, *big.Float) *big.Float

func(*big.Float, int) *big.Float

func(*big.Int) (*big.Int, int8)

func(*big.Int) *big.Float

func(*big.Int) *big.Int

func(*big.Int) *big.Rat

func(*big.Int) int

func(*big.Int, *big.Int) (*big.Int, *big.Int)

func(*big.Int, *big.Int) *big.Int

func(*big.Int, *big.Int) *big.Rat

func(*big.Int, *big.Int) bool

func(*big.Int, *big.Int, *big.Int) (*big.Int, *big.Int)

func(*big.Int, *big.Int, *big.Int) *big.Int

func(*big.Int, *big.Int, *big.Int, *big.Int) (*big.Int, *big.Int)

func(*big.Int, *big.Int, *big.Int, *big.Int) *big.Int

func(*big.Int, *big.Int, []uint8) (*big.Int, *big.Int)

func(*big.Int, *big.Int, []uint8, []uint8) (*big.Int, *big.Int)

func(*big.Int, int, uint) *big.Int

func(*big.Int, uint) *big.Int

func(*big.Rat) (*big.Rat, int8)

func(*big.Rat) *big.Float

func(*big.Rat) *big.Rat

func(*big.Rat) int

func(*big.Rat, *big.Rat) *big.Rat

func(*bigmod.Modulus) *bigmod.Nat

func(*bigmod.Modulus) []uint8

func(*bigmod.Nat) uint

func(*bigmod.Nat, *bigmod.Modulus) *bigmod.Nat

func(*bigmod.Nat, []uint8, *bigmod.Modulus) *bigmod.Nat

func(*bigmod.Nat, uint, *bigmod.Modulus) *bigmod.Nat

func(*bisect.dedup, *bisect.dedup) bool

func(*bool, string, bool, string)

func(*bool, string, string, bool, string)

func(*buffer.Buffer)

func(*buffer.Buffer, []uint8)

func(*buffer.Buffer, string)

func(*chi.Context, uint, string) (*chi.node, map[uint]*chi.endpoint, http.Handler)

func(*chi.Context, string, string) bool

func(*cmap.ConcurrentMapShared[go.shape.string,go.shape.*uint8])

func(*cmap.ConcurrentMapShared[go.shape.string,go.shape.string])

func(*cmap.ConcurrentMapShared[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }])

func(*cobra.Command)

func(*cobra.Command) error

func(*cobra.Command, []string)

func(*cobra.Command, []string) error

func(*cobra.Command, []string, string) ([]string, int)

func(*cobra.Command, error) error

func(*ecdh.PrivateKey) *ecdh.PublicKey

func(*ecdh.PrivateKey, *ecdh.PublicKey) ([]uint8, error)

func(*ecdh.PublicKey) ([]uint8, error)

func(*exec.Cmd)

func(*fiat.P224Element) *fiat.P224Element

func(*fiat.P224Element) int

func(*fiat.P224Element, *fiat.P224Element) *fiat.P224Element

func(*fiat.P224Element, *fiat.P224Element, int) *fiat.P224Element

func(*fiat.P384Element) *fiat.P384Element

func(*fiat.P384Element) int

func(*fiat.P384Element, *fiat.P384Element) *fiat.P384Element

func(*fiat.P384Element, *fiat.P384Element, int) *fiat.P384Element

func(*fiat.P521Element) *fiat.P521Element

func(*fiat.P521Element) int

func(*fiat.P521Element, *fiat.P521Element) *fiat.P521Element

func(*fiat.P521Element, *fiat.P521Element, int) *fiat.P521Element

func(*flag.Flag)

func(*flag.FlagSet)

func(*flate.decompressor)

func(*float32, string, float32, string)

func(*float32, string, string, float32, string)

func(*float64, string, float64, string)

func(*float64, string, string, float64, string)

func(*godebug.value)

func(*godebug.value) *godebug.value

func(*godebug.value, *godebug.value) bool

func(*http.Cookie)

func(*http.Request)

func(*http.Request) (*http.Response, error)

func(*http.Request) (*url.URL, error)

func(*http.Request) (http.Handler, string)

func(*http.Request, []*http.Request) error

func(*http.Request, http.http2RoundTripOpt) (*http.Response, error)

func(*http.Request, string) (*http.http2ClientConn, error)

func(*http.Server, *tls.Conn, http.Handler)

func(*http.http2ClientConn)

func(*http.http2serverConn)

func(*http.response)

func(*http.response) *http.response

func(*http.response, *http.response) bool

func(*int, string, int, string)

func(*int, string, string)

func(*int, string, string, int, string)

func(*int, string, string, string)

func(*int16, string, int16, string)

func(*int16, string, string, int16, string)

func(*int32, string, int32, string)

func(*int32, string, string, int32, string)

func(*int64, string, int64, string)

func(*int64, string, string, int64, string)

func(*int8, string, int8, string)

func(*int8, string, string, int8, string)

func(*interface {})

func(*interface {}) *interface {}

func(*interface {}, *interface {}) bool

func(*intern.Value)

func(*json.scanner, uint8) int

func(*jsoniter.Iterator)

func(*jsoniter.Iterator) bool

func(*jsoniter.Iterator, string) bool

func(*jsoniter.Stream)

func(*jsoniter.StructDescriptor)

func(*list.Element)

func(*list.Element) interface {}

func(*list.Element, *list.Element)

func(*list.List)

func(*map[string]int, string, map[string]int, string)

func(*map[string]int, string, string, map[string]int, string)

func(*map[string]int64, string, map[string]int64, string)

func(*map[string]int64, string, string, map[string]int64, string)

func(*map[string]string, string, map[string]string, string)

func(*map[string]string, string, string, map[string]string, string)

func(*[]uint8, string, []uint8, string)

func(*[]uint8, string, string, []uint8, string)

func(*[]uint8, string, []uint8, string)

func(*[]uint8, string, string, []uint8, string)

func(*net.IPNet, string, net.IPNet, string)

func(*net.IPNet, string, string, net.IPNet, string)

func(*net.netFD) error

func(*nistec.P224Point) *nistec.P224Point

func(*nistec.P224Point, *nistec.P224Point) *nistec.P224Point

func(*nistec.P224Point, *nistec.P224Point, int) *nistec.P224Point

func(*nistec.P224Point, []uint8) (*nistec.P224Point, error)

func(*nistec.P256Point) *nistec.P256Point

func(*nistec.P256Point, *nistec.P256Point) *nistec.P256Point

func(*nistec.P256Point, *nistec.P256Point, int) *nistec.P256Point

func(*nistec.P256Point, []uint8) (*nistec.P256Point, error)

func(*nistec.P384Point) *nistec.P384Point

func(*nistec.P384Point, *nistec.P384Point) *nistec.P384Point

func(*nistec.P384Point, *nistec.P384Point, int) *nistec.P384Point

func(*nistec.P384Point, []uint8) (*nistec.P384Point, error)

func(*nistec.P521Point) *nistec.P521Point

func(*nistec.P521Point, *nistec.P521Point) *nistec.P521Point

func(*nistec.P521Point, *nistec.P521Point, int) *nistec.P521Point

func(*nistec.P521Point, []uint8) (*nistec.P521Point, error)

func(*norm.reorderBuffer) bool

func(*os.Process) error

func(*os.file) error

func(*parse.Tree) *parse.IdentifierNode

func(*pflag.Flag)

func(*pflag.Flag, string) error

func(*pflag.FlagSet)

func(*pflag.FlagSet, string) string

func(*pkix.CertificateList) error

func(*[][]pkix.AttributeTypeAndValue)

func(*poll.splicePipe)

func(*rand.Rand, *big.Int) *big.Int

func(*reflect.MapIter)

func(*regexp.Regexp) bool

func(*regexp.Regexp, int) int

func(*runtime._defer)

func(*runtime._defer, *runtime._defer) bool

func(*runtime.coro)

func(*runtime.g, unsafe.Pointer) bool

func(*runtime.statAggregate, *runtime.metricValue)

func(*stacktrace.Stack)

func(*string)

func(*string) *string

func(*string, *string) bool

func(*string, string, string, string)

func(*string, string, string, string, string)

func(*strings.Builder)

func(*sync.readOnly)

func(*sync.readOnly) *sync.readOnly

func(*sync.readOnly, *sync.readOnly) bool

func(*syscall.Stat_t) error

func(*int64, string, string, int64, string)

func(*int64, string, int64, string)

func(*time.Location) time.Time

func(*tls.Certificate) error

func(*tls.CertificateRequestInfo) (*tls.Certificate, error)

func(*tls.ClientHelloInfo) (*tls.Certificate, error)

func(*tls.ClientHelloInfo) (*tls.Config, error)

func(*tls.Config, *tls.Certificate, *tls.clientHelloMsg, *tls.serverHelloMsg) (*tls.serverKeyExchangeMsg, error)

func(*tls.Config, *tls.Certificate, *tls.clientKeyExchangeMsg, uint16) ([]uint8, error)

func(*tls.Config, *tls.clientHelloMsg, *tls.serverHelloMsg, *x509.Certificate, *tls.serverKeyExchangeMsg) error

func(*tls.Config, *tls.clientHelloMsg, *x509.Certificate) ([]uint8, *tls.clientKeyExchangeMsg, error)

func(*tls.activeCert)

func(*torrent.Torrent)

func(*torrent.Torrent) bool

func(*uint, string, string, uint, string)

func(*uint, string, uint, string)

func(*uint16, string, string, uint16, string)

func(*uint16, string, uint16, string)

func(*uint32, string, string, uint32, string)

func(*uint32, string, uint32, string)

func(*uint64, string, string, uint64, string)

func(*uint64, string, uint64, string)

func(*uint8, string, string, uint8, string)

func(*uint8, string, uint8, string)

func(*url.URL) (zap.Sink, error)

func(*url.URL) *url.URL

func(*url.URL) []*http.Cookie

func(*url.URL, []*http.Cookie)

func(*url.URL, proxy.Dialer) (proxy.Dialer, error)

func(*x509.CertPool) bool

func(*x509.Certificate)

func(*x509.Certificate) bool

func(*x509.Certificate) error

func(*x509.Certificate, func([]*x509.Certificate) error)

func(*xml.Decoder, xml.StartElement) error

func(*xml.Encoder, xml.StartElement) error

func(*yaml.Node) error

func(*zap.Logger)

func(*zap.errArrayElem)

func(*zapcore.CheckedEntry)

func(*zapcore.CheckedEntry, []zapcore.Field)

func(*zapcore.errArrayElem)

func(*zapcore.jsonEncoder)

func(*zapcore.sliceArrayEncoder)

func([]*cobra.Command)

func([]*cobra.Group)

func([]*torrent.Torrent)

func([]*torrent.Torrent) bool

func([]*torrent.Torrent) int

func([]uint) func(http.ResponseWriter, *http.Request)

func([]func(http.Handler) http.Handler)

func([]func(http.Handler) http.Handler) chi.Router

func([]http.http2Setting) error

func([]int)

func([]int) bool

func([]int) int

func([]interface {})

func([]interface {}) *zap.SugaredLogger

func([]interface {}) jsoniter.Any

func([]interface {}) string

func([]string)

func([]string) *url.URL

func([]string) bool

func([]string) int

func([]zap.Option) *zap.Logger

func([]zap.Option) *zap.SugaredLogger

func([]zapcore.Field)

func([]zapcore.Field) *zap.Logger

func(<-chan singleflight.Result, func())

func([32]uint8)

func([4]uint64)

func([]*x509.Certificate) error

func([][32]uint8)

func([][]uint8, [][]*x509.Certificate) error

func([]uint) *big.Int

func([]int) (reflect.Value, error)

func([]int) reflect.StructField

func([]int) reflect.Value

func([]int) reflect2.StructField

func([]interface {}, bool, error)

func([]reflect.Value) []reflect.Value

func([]string)

func([]string) (*cobra.Command, []string, error)

func([]string) error

func([]string, func(*pflag.Flag, string) error) error

func([]uint8)

func([]uint8) (*big.Int, *big.Int)

func([]uint8) (*ecdh.PrivateKey, error)

func([]uint8) (*ecdh.PublicKey, error)

func([]uint8) (*fiat.P224Element, error)

func([]uint8) (*fiat.P384Element, error)

func([]uint8) (*fiat.P521Element, error)

func([]uint8) (*nistec.P224Point, error)

func([]uint8) (*nistec.P256Point, error)

func([]uint8) (*nistec.P384Point, error)

func([]uint8) (*nistec.P521Point, error)

func([]uint8) ([]hpack.HeaderField, error)

func([]uint8) (int, *net.IPAddr, error)

func([]uint8) (int, *net.UDPAddr, error)

func([]uint8) (int, *net.UnixAddr, error)

func([]uint8) (int, error)

func([]uint8) (int, net.Addr, error)

func([]uint8) (int, netip.AddrPort, error)

func([]uint8) (int, syscall.Sockaddr, error)

func([]uint8) (int32, int)

func([]uint8) *big.Int

func([]uint8) *jsoniter.Iterator

func([]uint8) [][]uint8

func([]uint8) []int

func([]uint8) []uint8

func([]uint8) bool

func([]uint8) cipher.BlockMode

func([]uint8) cipher.Stream

func([]uint8) error

func([]uint8) hash.Hash

func([]uint8, *bigmod.Modulus) (*bigmod.Nat, error)

func([]uint8, *net.IPAddr) (int, error)

func([]uint8, *net.UDPAddr) (int, error)

func([]uint8, *net.UnixAddr) (int, error)

func([]uint8, *syscall.SockaddrInet4) (int, error)

func([]uint8, *syscall.SockaddrInet6) (int, error)

func([]uint8, []interface {}) jsoniter.Any

func([]uint8, []uint8)

func([]uint8, []uint8) (int, int, int, *net.IPAddr, error)

func([]uint8, []uint8) (int, int, int, *net.UDPAddr, error)

func([]uint8, []uint8) (int, int, int, *net.UnixAddr, error)

func([]uint8, []uint8) (int, int, int, netip.AddrPort, error)

func([]uint8, []uint8) []uint8

func([]uint8, []uint8) tls.aead

func([]uint8, []uint8, *net.IPAddr) (int, int, error)

func([]uint8, []uint8, *net.UDPAddr) (int, int, error)

func([]uint8, []uint8, *net.UnixAddr) (int, int, error)

func([]uint8, []uint8, *syscall.SockaddrInet4) (int, int, error)

func([]uint8, []uint8, *syscall.SockaddrInet6) (int, int, error)

func([]uint8, []uint8, []uint8, []int) []uint8

func([]uint8, []uint8, []uint8, []uint8)

func([]uint8, []uint8, []uint8, []uint8) ([]uint8, error)

func([]uint8, []uint8, []uint8, []uint8) []uint8

func([]uint8, []uint8, bool) interface {}

func([]uint8, []uint8, int) (int, int, int, syscall.Sockaddr, error)

func([]uint8, []uint8, int, *syscall.SockaddrInet4) (int, int, int, error)

func([]uint8, []uint8, int, *syscall.SockaddrInet6) (int, int, int, error)

func([]uint8, []uint8, netip.AddrPort) (int, int, error)

func([]uint8, []uint8, syscall.Sockaddr) (int, int, error)

func([]uint8, func([]uint8) []uint8) []uint8

func([]uint8, int) [][][]uint8

func([]uint8, int) [][]int

func([]uint8, int) [][]uint8

func([]uint8, int) []uint8

func([]uint8, int) string

func([]uint8, int, int) int

func([]uint8, int64) (int, error)

func([]uint8, interface {}) error

func([]uint8, map[string]uint16, int) ([]uint8, error)

func([]uint8, net.Addr) (int, error)

func([]uint8, netip.AddrPort) (int, error)

func([]uint8, string) []uint8

func([]uint8, string, string, []int) []uint8

func([]uint8, syscall.Sockaddr) (int, error)

func([]uint8, tls.ConnectionState) (*tls.SessionState, error)

func([]uint8, uint8, int) []uint8

func([]zapcore.Field) zapcore.Core

func(ants.worker) error

func([]int) bool

func(uint8) *big.Float

func(bisect.Writer) bool

func(bisect.Writer, string, int) bool

func(bool)

func(bool) *big.Float

func(bool) bool

func(bool) error

func(bool, [8]uint8) error

func(bool, bool) bool

func(bool, error, error)

func(bool, func(int32) bool) ([]uint8, error)

func(chan cmap.Tuple[go.shape.string,go.shape.*uint8])

func(chan cmap.Tuple[go.shape.string,go.shape.string])

func(chan cmap.Tuple[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }])

func(chi.Router)

func(uint) *chi.endpoint

func(uint, string, http.Handler) *chi.node

func(func(string, *torrent.File))

func(func(string, *torrent.Torrent))

func(func(string, *realdebrid.Download))

func(func(string, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]))

func(func(string, string))

func(complex128)

func(complex128) bool

func(complex64)

func(context.Context)

func(context.Context) (*cobra.Command, error)

func(context.Context) *http.Request

func(context.Context) error

func(context.Context, *url.URL, *http.Request, *http.Response) error

func(context.Context, *url.URL, string) (map[string][]string, error)

func(context.Context, bool)

func(context.Context, io.ReadWriter, int) error

func(context.Context, net.Conn) context.Context

func(context.Context, net.Conn, string, string) (net.Addr, error)

func(context.Context, string) ([]*net.MX, error)

func(context.Context, string) ([]*net.NS, error)

func(context.Context, string) ([]net.IPAddr, error)

func(context.Context, string) ([]string, error)

func(context.Context, string) (string, error)

func(context.Context, string, *net.TCPAddr, *net.TCPAddr) (*net.TCPConn, error)

func(context.Context, string, string) ([][]uint8, error)

func(context.Context, string, string) ([]net.IPAddr, error)

func(context.Context, string, string) ([]netip.Addr, error)

func(context.Context, string, string) (int, error)

func(context.Context, string, string) (net.Conn, error)

func(context.Context, string, string) (net.Listener, error)

func(context.Context, string, string) (net.PacketConn, error)

func(context.Context, string, string, *tls.Config) (net.Conn, error)

func(context.Context, string, string, string) (string, []*net.SRV, error)

func(context.Context, string, string, syscall.RawConn) error

func(crypto.PrivateKey) bool

func(crypto.PublicKey) bool

func(uint16) uint16

func(uint16)

func(encoding.TextUnmarshaler, string, encoding.TextMarshaler, string)

func(error)

func(error) bool

func(error) error

func(flag.Value, string, string)

func(float32)

func(float64)

func(float64) *big.Float

func(float64) *big.Rat

func(float64) bool

func(float64, int)

func(fmt.ScanState, int32) error

func(fmt.State, int32)

func(uint32) error

func(func() error)

func(func())

func(func()) error

func(func()) func() bool

func(func(*cobra.Command) error)

func(func(*cobra.Command))

func(func(*cobra.Command, []string))

func(func(*cobra.Command, error) error)

func(func(*flag.Flag))

func(func(*jsoniter.Iterator) bool) bool

func(func(*jsoniter.Iterator, string) bool) bool

func(func(*pflag.Flag))

func(func(*pflag.FlagSet, string) string)

func(func(*torrent.Torrent) bool)

func(func(chi.Router)) chi.Router

func(func(hpack.HeaderField))

func(func(http.http2Setting) error) error

func(func(int) bool)

func(func(interface {}) error) error

func(func(interface {}, interface {}) bool)

func(func(string) bool)

func(func(string) bool) (reflect.StructField, bool)

func(func(string) bool) reflect.Value

func(func(string) bool) reflect2.StructField

func(func(uintptr) bool) error

func(func(uintptr)) error

func(string) uint32

func(hpack.HeaderField)

func(hpack.HeaderField) error

func(http.Handler) http.Handler

func(func(http.ResponseWriter, *http.Request))

func(func(http.ResponseWriter, *http.Request)) http.Handler

func(map[string][]string)

func(map[string][]string) []string

func(http.ResponseWriter, *http.Request)

func(uint8) bool

func(uint8, uint8, uint32, []uint8) error

func(http.http2FrameWriteRequest)

func(http.http2HeadersFrameParam) error

func(http.http2PushPromiseParam) error

func(http.http2Setting) error

func(uint16) (uint32, bool)

func(http.http2writeContext) error

func(httptrace.DNSDoneInfo)

func(httptrace.DNSStartInfo)

func(httptrace.GotConnInfo)

func(httptrace.WroteRequestInfo)

func(int)

func(int) ([]fs.DirEntry, error)

func(int) ([]fs.FileInfo, error)

func(int) ([]string, error)

func(int) ([]uint8, error)

func(int) (int, error)

func(int) (int, int)

func(int) (int, string, error)

func(int) (int32, int)

func(int) (netip.Prefix, error)

func(int) (syscall.Sockaddr, error)

func(int) *abi.Type

func(int) *uint8

func(int) []int

func(int) []uint8

func(int) bool

func(int) error

func(int) http.http2Setting

func(int) int

func(int) interface {}

func(int) reflect.Method

func(int) reflect.StructField

func(int) reflect.Type

func(int) reflect.Value

func(int) reflect2.StructField

func(int) reflectlite.Type

func(int) uint64

func(int) string

func(int) int64

func(int) uint

func(int) unsafe.Pointer

func(int, *cmap.ConcurrentMapShared[go.shape.string,go.shape.*uint8])

func(int, *cmap.ConcurrentMapShared[go.shape.string,go.shape.string])

func(int, *cmap.ConcurrentMapShared[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }])

func(int, []string) error

func(int, uint16, bool) error

func(int, func(int, int))

func(int, int)

func(int, int) (cipher.AEAD, error)

func(int, int) (int, error)

func(int, int) bool

func(int, int) error

func(int, int) interface {}

func(int, int) reflect.Value

func(int, int) unsafe.Pointer

func(int, int, *syscall.IPMreq) error

func(int, int, *syscall.IPMreqn) error

func(int, int, *syscall.IPv6Mreq) error

func(int, int, *syscall.Linger) error

func(int, int, [4]uint8) error

func(int, int, int) error

func(int, int, int) reflect.Value

func(int, int, int) time.Time

func(int, int, uint8) error

func(int, string) *uint8

func(int, string) error

func(int, map[string][]string) error

func(int, uintptr) unsafe.Pointer

func(int16)

func(int32)

func(int32) (http.http2FrameWriteRequest, http.http2FrameWriteRequest, int)

func(int32) (int, error)

func(int32) bool

func(int32) int

func(int32) int32

func(int32) uint32

func(int32, int32) bool

func(int64)

func(int64) (*multipart.Form, error)

func(int64) *big.Float

func(int64) *big.Int

func(int64) *big.Rat

func(int64) bool

func(int64) error

func(int64) int64

func(int64, int) (int64, error)

func(int64, int64) *big.Int

func(int64, int64) *big.Rat

func(int64, int64) bool

func(int8)

func(interface {})

func(interface {}) ([]uint8, error)

func(interface {}) (interface {}, bool)

func(interface {}) (string, error)

func(interface {}) *list.Element

func(interface {}) bool

func(interface {}) error

func(interface {}) int

func(interface {}) interface {}

func(interface {}) reflect2.MapIterator

func(interface {}) reflect2.Type

func(interface {}, *list.Element) *list.Element

func(interface {}, *xml.StartElement) error

func(interface {}, int)

func(interface {}, int) interface {}

func(interface {}, int, interface {})

func(interface {}, interface {})

func(interface {}, interface {}) (interface {}, bool)

func(interface {}, interface {}) bool

func(interface {}, interface {}) interface {}

func(interface {}, interface {}, interface {})

func(interface {}, interface {}, interface {}) bool

func(interface {}, string, string) ([]uint8, error)

func(interface {}, uintptr)

func(interface {}, xml.StartElement) error

func(io.Reader)

func(io.Reader) (*ecdh.PrivateKey, error)

func(io.Reader) (int64, error)

func(io.Reader) *jsoniter.Decoder

func(io.Reader) *jsoniter.Iterator

func(io.Reader) error

func(io.Reader, []uint8) error

func(io.Reader, []uint8, crypto.DecrypterOpts) ([]uint8, error)

func(io.Reader, []uint8, crypto.SignerOpts) ([]uint8, error)

func(io.Reader, interface {}, []pkix.RevokedCertificate, time.Time, time.Time) ([]uint8, error)

func(io.RuneReader) []int

func(io.RuneReader) bool

func(io.Writer)

func(io.Writer) (int64, error)

func(io.Writer) *jsoniter.Encoder

func(io.Writer) *jsoniter.Stream

func(io.Writer) error

func(io.Writer) zapcore.ReflectedEncoder

func(io.Writer, bool) error

func(io.Writer, map[string]bool) error

func(io.Writer, string) (int, error)

func(json.reflectWithString, json.reflectWithString) int

func(jsoniter.Extension)

func(map[string]*realdebrid.Download)

func(map[string]*torrent.File)

func(map[string]*torrent.Torrent)

func(map[string]cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent])

func(map[string]string)

func(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) bool

func(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

func(mapset.Set[int]) bool

func(mapset.Set[int]) mapset.Set[int]

func(mapset.Set[string]) bool

func(mapset.Set[string]) mapset.Set[string]

func(net.Conn) (*http.http2ClientConn, error)

func(net.Conn, *http.http2ServeConnOpts)

func(net.Conn, int)

func([]uint8) bool

func([]uint8) []uint8

func(net.Listener) context.Context

func(net.Listener) error

func(net.Listener, string, string) error

func(netip.Addr) bool

func(netip.Addr) int

func(netip.AddrPort) int

func(netip.Prefix) bool

func(os.Signal) error

func(parse.Node) (string, string)

func(int) *parse.IdentifierNode

func(pflag.Value, string, string)

func(pflag.Value, string, string, string)

func(pflag.Value, string, string, string) *pflag.Flag

func(reflect.Type) bool

func(reflect.Type) reflect.Value

func(reflect.Type) reflect2.Type

func(reflect.Value)

func(reflect.Value) (int, error)

func(reflect.Value) bool

func(reflect.Value) reflect.Value

func(reflect.Value, []reflect.Value) (bool, error)

func(reflect.Value, []reflect.Value) (reflect.Value, error)

func(reflect.Value, []reflect.Value) reflect.Value

func(reflect.Value, reflect.Value)

func(reflect.Value, reflect.Value) (bool, error)

func(reflect2.Type) bool

func(reflect2.Type) jsoniter.ValDecoder

func(reflect2.Type) jsoniter.ValEncoder

func(reflect2.Type, jsoniter.ValDecoder) jsoniter.ValDecoder

func(reflect2.Type, jsoniter.ValEncoder) jsoniter.ValEncoder

func(reflectlite.Type) bool

func(uint32)

func(uint32, uint32) bool

func(string)

func(string) (*big.Float, bool)

func(string) (*big.Rat, bool)

func(string) (*http.Cookie, error)

func(string) (*realdebrid.Download, bool)

func(string) (*tls.ClientSessionState, bool)

func(string) (*torrent.File, bool)

func(string) (*torrent.Torrent, bool)

func(string) (*url.URL, error)

func(string) ([]bool, error)

func(string) ([]float32, error)

func(string) ([]float64, error)

func(string) ([]int, error)

func(string) ([]int32, error)

func(string) ([]int64, error)

func(string) ([][]uint8, error)

func(string) ([]string, error)

func(string) ([]int64, error)

func(string) ([]uint, error)

func(string) ([]uint8, error)

func(string) (bool, error)

func(string) (cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent], bool)

func(string) (float32, error)

func(string) (float64, error)

func(string) (func(*cobra.Command, []string, string) ([]string, int), bool)

func(string) (int, error)

func(string) (int16, error)

func(string) (int32, error)

func(string) (int32, int)

func(string) (int64, error)

func(string) (int8, error)

func(string) (io.Writer, error)

func(string) (map[string]int, error)

func(string) (map[string]int64, error)

func(string) (map[string]string, error)

func(string) (multipart.File, *multipart.FileHeader, error)

func(string) ([]uint8, error)

func(string) ([]uint8, error)

func(string) (net.IPNet, error)

func(string) (reflect.Method, bool)

func(string) (reflect.StructField, bool)

func(string) (string, bool)

func(string) (string, error)

func(string) (int64, error)

func(string) (uint, error)

func(string) (uint16, error)

func(string) (uint32, error)

func(string) (uint64, error)

func(string) (uint8, error)

func(string) *cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.File]

func(string) *cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

func(string) *cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]

func(string) *cmap.ConcurrentMapShared[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]

func(string) *cmap.ConcurrentMapShared[string,string]

func(string) *flag.Flag

func(string) *jsoniter.Binding

func(string) *logutil.Logger

func(string) *pflag.Flag

func(string) *zap.Logger

func(string) *zap.SugaredLogger

func(string) []int

func(string) []string

func(string) bool

func(string) config.Directory

func(string) error

func(string) func()

func(string) int

func(string) net.sockaddr

func(string) netip.Addr

func(string) reflect.Value

func(string) reflect2.StructField

func(string) string

func(string) uint32

func(string, *http.PushOptions) error

func(string, *http.routingNode) bool

func(string, *realdebrid.Download)

func(string, *realdebrid.Download) bool

func(string, *realdebrid.Download, func(bool, *realdebrid.Download, *realdebrid.Download) *realdebrid.Download) *realdebrid.Download

func(string, *tls.ClientSessionState)

func(string, *tls.Conn) http.RoundTripper

func(string, *torrent.File)

func(string, *torrent.File) bool

func(string, *torrent.File, func(bool, *torrent.File, *torrent.File) *torrent.File) *torrent.File

func(string, *torrent.Torrent)

func(string, *torrent.Torrent) bool

func(string, *torrent.Torrent, func(bool, *torrent.Torrent, *torrent.Torrent) *torrent.Torrent) *torrent.Torrent

func(string, []interface {})

func(string, []interface {}) string

func(string, []string) error

func(string, []zapcore.Field)

func(string, []bool, string) *[]bool

func(string, []float32, string) *[]float32

func(string, []float64, string) *[]float64

func(string, []int, string) *[]int

func(string, []int32, string) *[]int32

func(string, []int64, string) *[]int64

func(string, [][]uint8, string) *[][]uint8

func(string, []string)

func(string, []string, string) *[]string

func(string, []int64, string) *[]int64

func(string, []uint, string) *[]uint

func(string, []uint8)

func(string, []uint8, int) ([]uint8, error)

func(string, []uint8, string) *[]uint8

func(string, bool)

func(string, bool) error

func(string, bool, string) *bool

func(string, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent])

func(string, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) bool

func(string, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent], func(bool, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent], cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

func(string, func(string, *torrent.File, bool) bool) bool

func(string, func(string, *torrent.Torrent, bool) bool) bool

func(string, func(string, *realdebrid.Download, bool) bool) bool

func(string, func(string, cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent], bool) bool) bool

func(string, func(string, string, bool) bool) bool

func(string, complex128)

func(string, complex64)

func(string, int)

func(string, float32)

func(string, float32, string) *float32

func(string, float64)

func(string, float64, string) *float64

func(string, func() (interface {}, error)) (interface {}, error, bool)

func(string, func() (interface {}, error)) <-chan singleflight.Result

func(string, func(*cobra.Command, []string, string) ([]string, int)) error

func(string, func(chi.Router)) chi.Router

func(string, func(http.ResponseWriter, *http.Request))

func(string, func(string) string) string

func(string, http.Handler)

func(string, func(http.ResponseWriter, *http.Request))

func(string, http.RoundTripper)

func(string, int)

func(string, int) (*big.Float, int, error)

func(string, int) (*big.Int, bool)

func(string, int) [][]int

func(string, int) [][]string

func(string, int) []string

func(string, int) string

func(string, int, uint32) (*os.File, error)

func(string, int, int) int

func(string, int, string) *int

func(string, int16)

func(string, int16, string) *int16

func(string, int32)

func(string, int32, string) *int32

func(string, int64)

func(string, int64, string) *int64

func(string, int8)

func(string, int8, string) *int8

func(string, interface {}) error

func(string, interface {}) zapcore.Field

func(string, io.Reader) (io.Reader, error)

func(string, map[string]int, string) *map[string]int

func(string, map[string]int64, string) *map[string]int64

func(string, map[string]string, string) *map[string]string

func(string, []uint8, string) *[]uint8

func(string, []uint8, string) *[]uint8

func(string, net.IPNet, string) *net.IPNet

func(string, int)

func(string, string)

func(string, string) (io.Writer, error)

func(string, string) (net.Conn, error)

func(string, string) *int

func(string, string) bool

func(string, string) error

func(string, string) string

func(string, string, *tls.Config) (net.Conn, error)

func(string, string, []bool, string) *[]bool

func(string, string, []float32, string) *[]float32

func(string, string, []float64, string) *[]float64

func(string, string, []int, string) *[]int

func(string, string, []int32, string) *[]int32

func(string, string, []int64, string) *[]int64

func(string, string, [][]uint8, string) *[][]uint8

func(string, string, []string) error

func(string, string, []string, string) *[]string

func(string, string, []int64, string) *[]int64

func(string, string, []uint, string) *[]uint

func(string, string, []uint8, string) *[]uint8

func(string, string, bool, string) *bool

func(string, string, func(bool, string, string) string) string

func(string, string, error)

func(string, string, float32, string) *float32

func(string, string, float64, string) *float64

func(string, string, func(string) error)

func(string, string, http.Handler)

func(string, string, func(http.ResponseWriter, *http.Request))

func(string, string, int, string) *int

func(string, string, int16, string) *int16

func(string, string, int32, string) *int32

func(string, string, int64, []string, []string, []int64) bool

func(string, string, int64, string) *int64

func(string, string, int8, string) *int8

func(string, string, map[string]int, string) *map[string]int

func(string, string, map[string]int64, string) *map[string]int64

func(string, string, map[string]string, string) *map[string]string

func(string, string, []uint8) bool

func(string, string, []uint8, string) *[]uint8

func(string, string, []uint8, string) *[]uint8

func(string, string, net.IPNet, string) *net.IPNet

func(string, string, string) *int

func(string, string, string) *string

func(string, string, string, map[string]*parse.Tree, []map[string]interface {}) (*parse.Tree, error)

func(string, string, string, string) *string

func(string, string, syscall.RawConn) error

func(string, string, int64, string) *int64

func(string, string, uint, string) *uint

func(string, string, uint16, string) *uint16

func(string, string, uint32, string) *uint32

func(string, string, uint64, string) *uint64

func(string, string, uint8, string) *uint8

func(string, int64)

func(string, int64, string) *int64

func(string, time.Time)

func(string, uint)

func(string, uint, string) *uint

func(string, uint16)

func(string, uint16, string) *uint16

func(string, uint32)

func(string, uint32, string) *uint32

func(string, uint64)

func(string, uint64, string) *uint64

func(string, uint8)

func(string, uint8, string) *uint8

func(string, uintptr)

func(string, zapcore.ArrayMarshaler) error

func(string, zapcore.ObjectMarshaler) error

func(map[string][]string) (io.Writer, error)

func(int64)

func(int64) *time.Ticker

func(int64) []ants.worker

func(int64) bool

func(int64) error

func(int64) int64

func(int64) time.Time

func(time.Time)

func(time.Time) bool

func(time.Time) error

func(time.Time) int

func(time.Time) int64

func(time.Time, string)

func(tls.ConnectionState) error

func(tls.ConnectionState, *tls.SessionState) ([]uint8, error)

func(tls.ConnectionState, error)

func(uint)

func(uint) *big.Float

func(uint16)

func(uint16) tls.keyAgreement

func(uint32)

func(uint32) []uint8

func(uint32) error

func(uint32) uint32

func(uint32, bool, []uint8) error

func(uint32, bool, []uint8, []uint8) error

func(uint32, uint32) error

func(uint32, uint32, []uint8) error

func(uint32, http.http2OpenStreamOptions)

func(uint32, http.http2PriorityParam)

func(uint32, http.http2PriorityParam) error

func(uint32, uint32) bool

func(uint32, uint32) error

func(uint64)

func(uint64) *big.Float

func(uint64) *big.Int

func(uint64) *big.Rat

func(uint64) bool

func(uint64) uint64

func(uint64, uint64) bool

func(uint8)

func(uint8) ([]uint8, error)

func(uint8) (string, error)

func(uint8) error

func(uint8, int) string

func(uintptr)

func(uintptr) (string, int)

func(uintptr) (uintptr, int64)

func(uintptr) bool

func(uintptr) uintptr

func(uintptr, uintptr) []uint8

func(uintptr, uintptr) bool

func(unsafe.Pointer)

func(unsafe.Pointer) bool

func(unsafe.Pointer) int

func(unsafe.Pointer) interface {}

func(unsafe.Pointer) reflect2.MapIterator

func(unsafe.Pointer) unsafe.Pointer

func(unsafe.Pointer, *jsoniter.Iterator)

func(unsafe.Pointer, *jsoniter.Stream)

func(unsafe.Pointer, int)

func(unsafe.Pointer, int) unsafe.Pointer

func(unsafe.Pointer, int, unsafe.Pointer)

func(unsafe.Pointer, uintptr) uintptr

func(unsafe.Pointer, unsafe.Pointer)

func(unsafe.Pointer, unsafe.Pointer) bool

func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer

func(unsafe.Pointer, unsafe.Pointer, unsafe.Pointer)

func(x509.OID) bool

func(int, []uint8, []uint8) error

func(x509.VerifyOptions) ([][]*x509.Certificate, error)

func(xml.Attr) error

func(xml.Name) (xml.Attr, error)

func(xml.Token) error

func(zapcore.ArrayEncoder) error

func(zapcore.ArrayMarshaler) error

func(zapcore.Core) zapcore.Core

func(zapcore.EncoderConfig) (zapcore.Encoder, error)

func(zapcore.Entry, *zapcore.CheckedEntry) *zapcore.CheckedEntry

func(zapcore.Entry, []zapcore.Field) (*buffer.Buffer, error)

func(zapcore.Entry, []zapcore.Field) error

func(zapcore.Entry, uint8) *zapcore.CheckedEntry

func(zapcore.Entry, zapcore.CheckWriteHook) *zapcore.CheckedEntry

func(zapcore.Entry, zapcore.Core) *zapcore.CheckedEntry

func(zapcore.Field) bool

func(int8)

func(int8) bool

func(int8, string) *zapcore.CheckedEntry

func(int8, string, []zapcore.Field)

func(zapcore.ObjectEncoder)

func(zapcore.ObjectEncoder) error

func(zapcore.ObjectMarshaler) error

*torrent.Torrent

*uint8

[]net.IPAddr

[]string

[]dnsmessage.Resource

int

string

type godebug.runtimeStderr struct{}

type godebugs.Info struct {
	Name    string
	Package string
	Changed int
	Old     string
	Opaque  bool
}

type gzip.Header struct {
	Comment string
	Extra   []uint8
	ModTime time.Time
	Name    string
	OS      uint8
}

uint8

type hpack.DecodingError struct {
	Err error
}

type hpack.HeaderField struct {
	Name      string
	Value     string
	Sensitive bool
}

int

[0]func()

type http.ApiErrorResponse struct {
	Message string `json:"error"`
	Code    int    `json:"error_code"`
}

type http.Client struct {
	Transport     http.RoundTripper
	CheckRedirect func(*http.Request, []*http.Request) error
	Jar           http.CookieJar
	Timeout       int64
}

int

type http.Cookie struct {
	Name       string
	Value      string
	Path       string
	Domain     string
	Expires    time.Time
	RawExpires string
	MaxAge     int
	Secure     bool
	HttpOnly   bool
	SameSite   int
	Raw        string
	Unparsed   []string
}

func(http.ResponseWriter, *http.Request)

map[string][]string

type http.MaxBytesError struct {
	Limit int64
}

type http.ProtocolError struct {
	ErrorString string
}

type http.PushOptions struct {
	Method string
	Header map[string][]string
}

type http.Response struct{
	Status string
	StatusCode int
	Proto string
	ProtoMajor int
	ProtoMinor int
	Header map[string][]string
	Body io.ReadCloser
	ContentLength int64
	TransferEncoding []string
	Close bool
	Uncompressed bool
	Trailer map[string][]string
	Request *<nil>
	TLS *tls.ConnectionState
}

int

type http.fakeLocker struct{}

type http.globalOptionsHandler struct{}

[]uint8

type http.http2ClientConnState struct {
	Closed               bool
	Closing              bool
	StreamsActive        int
	StreamsReserved      int
	StreamsPending       int
	MaxConcurrentStreams uint32
	LastIdle             time.Time
}

uint32

uint32

uint8

uint8

type http.http2GoAwayError struct {
	LastStreamID uint32
	ErrCode      uint32
	DebugData    string
}

type http.http2HeadersFrameParam struct {
	StreamID      uint32
	BlockFragment []uint8
	EndStream     bool
	EndHeaders    bool
	PadLength     uint8
	Priority      http.http2PriorityParam
}

type http.http2OpenStreamOptions struct {
	PusherID uint32
}

type http.http2PriorityParam struct {
	StreamDep uint32
	Exclusive bool
	Weight    uint8
}

type http.http2PushPromiseParam struct {
	StreamID      uint32
	PromiseID     uint32
	BlockFragment []uint8
	EndHeaders    bool
	PadLength     uint8
}

type http.http2RoundTripOpt struct {
	OnlyCachedConn bool
}

type http.http2ServeConnOpts struct {
	Context          context.Context
	BaseConfig       *http.Server
	Handler          http.Handler
	UpgradeRequest   *http.Request
	Settings         []uint8
	SawClientPreface bool
}

type http.http2Setting struct {
	ID  uint16
	Val uint32
}

uint16

type http.http2StreamError struct {
	StreamID uint32
	Code     uint32
	Cause    error
}

chan struct {}

type http.http2connError struct {
	Code   uint32
	Reason string
}

string

type http.http2flushFrameWriter struct{}

func(*http.http2frameCache, http.http2FrameHeader, func(string), []uint8) (http.http2Frame, error)

chan struct {}

type http.http2goAwayFlowError struct{}

uint64

type http.http2handlerPanicRST struct {
	StreamID uint32
}

string

string

[0]func()

type http.http2missingBody struct{}

type http.http2noBodyReader struct{}

type http.http2noCachedConnError struct{}

int

string

int

[]*http.http2priorityNode

int

[]*http.http2writeQueue

[]http.http2Setting

type http.http2writeSettingsAck struct{}

[0]func()

type http.mp4Sig struct{}

type http.noBody struct{}

string

type http.socksAddr struct {
	Name string
	IP   []uint8
	Port int
}

int

type http.socksUsernamePassword struct {
	Username string
	Password string
}

type http.textSig struct{}

type http.tlsHandshakeTimeoutError struct{}

type http.writerOnly struct {
	io.Writer
}

type httpproxy.Config struct {
	HTTPProxy  string
	HTTPSProxy string
	NoProxy    string
	CGI        bool
}

type httpproxy.allMatch struct{}

type httptrace.ClientTrace struct {
	GetConn              func(string)
	GotConn              func(httptrace.GotConnInfo)
	PutIdleConn          func(error)
	GotFirstResponseByte func()
	Got100Continue       func()
	Got1xxResponse       func(int, map[string][]string) error
	DNSStart             func(httptrace.DNSStartInfo)
	DNSDone              func(httptrace.DNSDoneInfo)
	ConnectStart         func(string, string)
	ConnectDone          func(string, string, error)
	TLSHandshakeStart    func()
	TLSHandshakeDone     func(tls.ConnectionState, error)
	WroteHeaderField     func(string, []string)
	WroteHeaders         func()
	Wait100Continue      func()
	WroteRequest         func(httptrace.WroteRequestInfo)
}

type httptrace.DNSDoneInfo struct {
	Addrs     []net.IPAddr
	Err       error
	Coalesced bool
}

type httptrace.DNSStartInfo struct {
	Host string
}

type httptrace.GotConnInfo struct {
	Conn     net.Conn
	Reused   bool
	WasIdle  bool
	IdleTime int64
}

type httptrace.WroteRequestInfo struct {
	Err error
}

type httptrace.clientEventContextKey struct{}

int32

int

int16

int32

int64

int8

type interface {} interface{}
type internal.FlushAfterChunkWriter struct {
	*bufio.Writer
}

type internal.chunkedWriter struct {
	Wire io.Writer
}

type io.LimitedReader struct {
	R io.Reader
	N int64
}

type io.discard struct{}

type io.eofReader struct{}

type io.nopCloser struct {
	io.Reader
}

type io.nopCloserWriterTo struct {
	io.Reader
}

type json.InvalidUnmarshalError struct {
	Type reflect.Type
}

string

[]uint8

type json.UnmarshalTypeError struct {
	Value  string
	Type   reflect.Type
	Offset int64
	Struct string
	Field  string
}

type json.UnsupportedTypeError struct {
	Type reflect.Type
}

type json.UnsupportedValueError struct {
	Value reflect.Value
	Str   string
}

[]json.field

func(*json.encodeState, reflect.Value, json.encOpts)

type json.errorContext struct {
	Struct     reflect.Type
	FieldStack []string
}

int

type json.unquotedValue struct{}

type jsoniter.Config struct {
	IndentionStep                 int
	MarshalFloatWith6Digits       bool
	EscapeHTML                    bool
	SortMapKeys                   bool
	UseNumber                     bool
	DisallowUnknownFields         bool
	TagKey                        string
	OnlyTaggedField               bool
	ValidateJsonRawMessage        bool
	ObjectFieldMustBeSimpleString bool
	CaseSensitive                 bool
}

map[reflect2.Type]jsoniter.ValDecoder

func(unsafe.Pointer, *jsoniter.Iterator)

map[reflect2.Type]jsoniter.ValEncoder

func(unsafe.Pointer, *jsoniter.Stream)

string

type jsoniter.OptionalDecoder struct {
	ValueType    reflect2.Type
	ValueDecoder jsoniter.ValDecoder
}

type jsoniter.OptionalEncoder struct {
	ValueEncoder jsoniter.ValEncoder
}

[]uint8

type jsoniter.StructDescriptor struct {
	Type   reflect2.Type
	Fields []*jsoniter.Binding
}

int

type jsoniter.baseAny struct{}

type jsoniter.boolCodec struct{}

type jsoniter.dereferenceEncoder struct {
	ValueEncoder jsoniter.ValEncoder
}

type jsoniter.directAnyCodec struct{}

type jsoniter.efaceDecoder struct{}

type jsoniter.emptyArrayEncoder struct{}

type jsoniter.emptyStructEncoder struct{}

[]jsoniter.encodedKV

type jsoniter.float32Codec struct{}

type jsoniter.float64Codec struct{}

type jsoniter.htmlEscapedStringEncoder struct{}

type jsoniter.int16Codec struct{}

type jsoniter.int32Codec struct{}

type jsoniter.int64Codec struct{}

type jsoniter.int8Codec struct{}

type jsoniter.jsonNumberCodec struct{}

type jsoniter.jsonRawMessageCodec struct{}

type jsoniter.jsoniterNumberCodec struct{}

type jsoniter.jsoniterRawMessageCodec struct{}

type jsoniter.lossyFloat32Encoder struct{}

type jsoniter.lossyFloat64Encoder struct{}

[]*jsoniter.Binding

type jsoniter.stringCodec struct{}

type jsoniter.uint16Codec struct{}

type jsoniter.uint32Codec struct{}

type jsoniter.uint64Codec struct{}

type jsoniter.uint8Codec struct{}

map[*http.conn]struct {}

map[*http.http2ClientConn][]string

map[*http.http2serverConn]struct {}

map[*http.persistConn]*list.Element

map[*net.Listener]struct {}

map[*pflag.Flag]func(*cobra.Command, []string, string) ([]string, int)

map[*reflect.structType]bool

map[*reflect.structType]int

map[*syntax.Regexp]int

map[*syntax.Regexp]int64

map[*torrent.Torrent]struct {}

map[*yaml.Node]bool

map[[8]uint8]chan struct {}

map[int32]*abi.Type

map[uint]*chi.endpoint

map[uint]string

map[context.canceler]struct {}

map[uint][]uint8

map[uint]asn1.RawValue

map[uint16]string

map[uint16]string

map[uint16]string

map[uint8]string

map[*torrent.Torrent]struct {}

map[int]struct {}

map[string]*uint8

map[string]string

map[string]go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }

map[string]struct {}

map[hpack.pairNameValue]uint64

map[int]string

map[http.cancelKey]func(error)

map[http.connectMethodKey][]*http.persistConn

map[http.connectMethodKey]http.wantConnQueue

map[http.connectMethodKey]int

map[uint32]string

map[uint8]string

map[uint8]func(*http.http2frameCache, http.http2FrameHeader, func(string), []uint8) (http.http2Frame, error)

map[uint8]map[uint8]string

map[uint8]string

map[uint16]bool

map[uint16]string

map[http.routingIndexKey][]*http.pattern

map[int32]bool

map[int32]string

map[int32]unsafe.Pointer

map[int64]struct {}

map[int]int

map[int]string

map[int]struct {}

map[interface {}]*sync.entry

map[interface {}]bool

map[interface {}]interface {}

map[interface {}]struct {}

map[intern.key]*intern.Value

map[intern.key]uintptr

map[int]string

map[string]*pflag.Flag

map[uint]reflect2.Type

map[reflect.Type]*yaml.structInfo

map[reflect.Type]bool

map[reflect.Type]int

map[reflect.visit]bool

map[reflect2.Type]jsoniter.ValDecoder

map[reflect2.Type]jsoniter.ValEncoder

map[runtime._typePair]struct {}

map[string]*config.Directory

map[string]*flag.Flag

map[string]*http.http2addConnCall

map[string]*http.http2dialCall

map[string]*http.routingNode

map[string]*json.field

map[string]*jsoniter.Binding

map[string]*jsoniter.structFieldDecoder

map[string]*parse.Tree

map[string]*realdebrid.Download

map[string]*singleflight.call

map[string]*template.Template

map[string]*tls.Certificate

map[string]*torrent.File

map[string]*torrent.Torrent

map[string]*unicode.RangeTable

map[string]*yaml.Node

map[string][]*http.Cookie

map[string][]*http.http2ClientConn

map[string][]*multipart.FileHeader

map[string][]int

map[string][]net.nssSource

map[string][]string

map[string]bool

map[string]map[uint]*chi.endpoint

map[string]uint

map[string]cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]

map[string]func(*http.Server, *tls.Conn, http.Handler)

map[string]func(*url.URL) (zap.Sink, error)

map[string]func(*url.URL, proxy.Dialer) (proxy.Dialer, error)

map[string]func(string, *tls.Conn) http.RoundTripper

map[string]func(zapcore.EncoderConfig) (zapcore.Encoder, error)

map[string]http.Handler

map[string]http.RoundTripper

map[string]http.muxEntry

map[string]int

map[string]int32

map[string]int64

map[string]interface {}

map[string]jsoniter.Any

map[string]jsoniter.ValDecoder

map[string]jsoniter.ValEncoder

map[string]map[string]bool

map[string]map[string]int

map[string]map[string]string

map[string]net.byName

map[string]int

map[string]reflect.Value

map[string]runtime.metricData

map[string]string

map[string]struct {}

map[string]syntax.charGroup

map[string]uint16

map[string]uint64

map[string]yaml.fieldInfo

map[string]yaml.resolveMapItem

map[uint8]string

map[uint16]bool

map[uint32]*http.http2clientStream

map[uint32]*http.http2priorityNode

map[uint32]*http.http2stream

map[uint32]*http.http2writeQueue

map[uint32][]*abi.Type

map[uint32]int32

map[uint64]bool

map[uint8]*pflag.Flag

map[unsafe.Pointer]int32

map[[28]uint8]bool

map[int8]uint8

map[int8]string

map[*torrent.Torrent]struct {}

map[*torrent.Torrent]struct {}

map[int]struct {}

map[string]struct {}

map[int]struct {}

map[string]struct {}

type multipart.Form struct {
	Value map[string][]string
	File  map[string][]*multipart.FileHeader
}

type multipart.sectionReadCloser struct {
	*io.SectionReader
	io.Closer
}

type multipart.writerOnly struct {
	io.Writer
}

type net.AddrError struct {
	Err  string
	Addr string
}

type net.DNSError struct {
	Err         string
	Name        string
	Server      string
	IsTimeout   bool
	IsTemporary bool
	IsNotFound  bool
}

uint

[]uint8

[]uint8

type net.IPAddr struct {
	IP   []uint8
	Zone string
}

[]uint8

type net.IPNet struct {
	IP   []uint8
	Mask []uint8
}

type net.Interface struct {
	Index        int
	MTU          int
	Name         string
	HardwareAddr []uint8
	Flags        uint
}

type net.MX struct {
	Host string
	Pref uint16
}

type net.NS struct {
	Host string
}

type net.OpError struct {
	Op     string
	Net    string
	Source net.Addr
	Addr   net.Addr
	Err    error
}

type net.ParseError struct {
	Type string
	Text string
}

type net.SRV struct {
	Target   string
	Port     uint16
	Priority uint16
	Weight   uint16
}

type net.TCPAddr struct {
	IP   []uint8
	Port int
	Zone string
}

type net.UDPAddr struct {
	IP   []uint8
	Port int
	Zone string
}

type net.UnixAddr struct {
	Name string
	Net  string
}

string

int8

int32

uint8

uint32

uint16

[]net.Addr

type net.addrPortUDPAddr struct {
	netip.AddrPort
}

int

[]*net.MX

[]*net.SRV

type net.canceledError struct{}

int

type net.ipAttr struct {
	Scope      uint8
	Precedence uint8
	Label      uint8
}

uint8

type net.noReadFrom struct{}

type net.noWriteTo struct{}

uint8

type net.timeoutError struct{}

type nettrace.LookupIPAltResolverKey struct{}

type nettrace.Trace struct {
	DNSStart     func(string)
	DNSDone      func([]interface{}, bool, error)
	ConnectStart func(string, string)
	ConnectDone  func(string, string, error)
}

type nettrace.TraceKey struct{}

[15]*nistec.P224Point

[4]uint64

[15]*nistec.P384Point

[15]*nistec.P521Point

int

func(*norm.Iter) []uint8

func(norm.input, int) norm.Properties

uint8

uint8

type os.LinkError struct {
	Op  string
	Old string
	New string
	Err error
}

type os.SyscallError struct {
	Syscall string
	Err     error
}

type os.noReadFrom struct{}

type os.noWriteTo struct{}

type parse.IfNode struct {
	parse.BranchNode
}

uint

int

int

type parse.RangeNode struct {
	parse.BranchNode
}

type parse.WithNode struct {
	parse.BranchNode
}

int

type pem.Block struct {
	Type    string
	Headers map[string]string
	Bytes   []uint8
}

int

type pflag.Flag struct {
	Name                string
	Shorthand           string
	Usage               string
	Value               pflag.Value
	DefValue            string
	Changed             bool
	NoOptDefVal         string
	Deprecated          string
	Hidden              bool
	ShorthandDeprecated string
	Annotations         map[string][]string
}

string

type pflag.ParseErrorsWhitelist struct {
	UnknownFlags bool
}

bool

[]uint8

[]uint8

int

int64

float32

float64

int16

int32

int64

int8

int

[]uint8

type pflag.ipNetValue struct {
	IP   []uint8
	Mask []uint8
}

[]uint8

string

uint16

uint32

uint64

uint8

uint

type pkix.AlgorithmIdentifier struct {
	Algorithm  []int
	Parameters asn1.RawValue `asn1:"optional"`
}

type pkix.AttributeTypeAndValue struct {
	Type  []int
	Value interface{}
}

type pkix.CertificateList struct {
	TBSCertList        pkix.TBSCertificateList
	SignatureAlgorithm pkix.AlgorithmIdentifier
	SignatureValue     asn1.BitString
}

type pkix.Extension struct {
	Id       []int
	Critical bool `asn1:"optional"`
	Value    []uint8
}

type pkix.Name struct {
	Country            []string
	Organization       []string
	OrganizationalUnit []string
	Locality           []string
	Province           []string
	StreetAddress      []string
	PostalCode         []string
	SerialNumber       string
	CommonName         string
	Names              []pkix.AttributeTypeAndValue
	ExtraNames         []pkix.AttributeTypeAndValue
}

[][]pkix.AttributeTypeAndValue

[]pkix.AttributeTypeAndValue

type pkix.RevokedCertificate struct {
	SerialNumber   *big.Int
	RevocationTime time.Time
	Extensions     []pkix.Extension `asn1:"optional"`
}

type pkix.TBSCertificateList struct {
	Raw                 []uint8
	Version             int `asn1:"optional,default:0"`
	Signature           pkix.AlgorithmIdentifier
	Issuer              [][]pkix.AttributeTypeAndValue
	ThisUpdate          time.Time
	NextUpdate          time.Time                 `asn1:"optional"`
	RevokedCertificates []pkix.RevokedCertificate `asn1:"optional"`
	Extensions          []pkix.Extension          `asn1:"tag:0,optional,explicit"`
}

type poll.DeadlineExceededError struct{}

string

type poll.errNetClosing struct{}

type proxy.direct struct{}

int

type realdebrid.ActiveTorrentCountResponse struct {
	DownloadingCount    int `json:"nb"`
	MaxNumberOfTorrents int `json:"limit"`
}

type realdebrid.Alias struct {
	Filename   string `json:"filename"`
	Filesize   int64  `json:"filesize"`
	Link       string `json:"link"`
	Host       string `json:"host"`
	Download   string `json:"download"`
	Streamable int    `json:"streamable"`
	Generated  string `json:"-"`
}

type realdebrid.Alias struct {
	ID       string `json:"id"`
	Name     string `json:"filename"`
	Hash     string `json:"hash"`
	Progress int    `json:"-"`
	Status   string `json:"status"`
	Added    string `json:"-"`
}

type realdebrid.Alias struct {
	ID            string               `json:"id"`
	Name          string               `json:"filename"`
	Hash          string               `json:"hash"`
	Progress      int                  `json:"-"`
	Status        string               `json:"status"`
	Added         string               `json:"-"`
	Ended         string               `json:"-"`
	Bytes         int64                `json:"bytes"`
	Links         []string             `json:"links"`
	OriginalName  string               `json:"original_filename"`
	OriginalBytes int64                `json:"original_bytes"`
	Files         []realdebrid.File `json:"files"`
}

type realdebrid.Alias struct {
	ID            string               `json:"id"`
	Name          string               `json:"filename"`
	Hash          string               `json:"hash"`
	Progress      int                  `json:"-"`
	Status        string               `json:"status"`
	Added         string               `json:"-"`
	Ended         string               `json:"-"`
	Bytes         int64                `json:"bytes"`
	Links         []string             `json:"links"`
	OriginalName  string               `json:"original_filename"`
	OriginalBytes int64                `json:"original_bytes"`
	Files         []realdebrid.File `json:"files"`
}

type realdebrid.Download struct {
	Filename   string `json:"filename"`
	Filesize   int64  `json:"filesize"`
	Link       string `json:"link"`
	Host       string `json:"host"`
	Download   string `json:"download"`
	Streamable int    `json:"streamable"`
	Generated  string `json:"-"`
}

type realdebrid.File struct {
	ID       int    `json:"id"`
	Path     string `json:"path"`
	Bytes    int64  `json:"bytes"`
	Selected int    `json:"selected"`
}

type realdebrid.HostInfo struct {
	Address string
	Hops    int
	Latency int64
}

type realdebrid.MagnetResponse struct {
	ID  string `json:"id"`
	URI string `json:"uri"`
}

type realdebrid.Torrent struct {
	ID       string `json:"id"`
	Name     string `json:"filename"`
	Hash     string `json:"hash"`
	Progress int    `json:"-"`
	Status   string `json:"status"`
	Added    string `json:"-"`
}

type realdebrid.TorrentInfo struct {
	ID            string               `json:"id"`
	Name          string               `json:"filename"`
	Hash          string               `json:"hash"`
	Progress      int                  `json:"-"`
	Status        string               `json:"status"`
	Added         string               `json:"-"`
	Ended         string               `json:"-"`
	Bytes         int64                `json:"bytes"`
	Links         []string             `json:"links"`
	OriginalName  string               `json:"original_filename"`
	OriginalBytes int64                `json:"original_bytes"`
	Files         []realdebrid.File `json:"files"`
}

type realdebrid.User struct {
	ID         int    `json:"id"`
	Username   string `json:"username"`
	Email      string `json:"email"`
	Points     int    `json:"points"`
	Locale     string `json:"locale"`
	Type       string `json:"type"`
	Premium    int    `json:"premium"`
	Expiration string `json:"expiration"`
}

int

uint

type reflect.Method struct {
	Name    string
	PkgPath string
	Type    reflect.Type
	Func    reflect.Value
	Index   int
}

type reflect.StructField struct {
	Name      string
	PkgPath   string
	Type      reflect.Type
	Tag       string
	Offset    uintptr
	Index     []int
	Anonymous bool
}

string

type reflect.ValueError struct {
	Method string
	Kind   uint
}

int

uintptr

type reflect.ptrType struct {
	abi.PtrType
}

type reflect.sliceType struct {
	abi.SliceType
}

type reflect.structType struct {
	abi.StructType
}

type reflect2.safeField struct {
	reflect.StructField
}

type reflect2.sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

type reflectlite.ValueError struct {
	Method string
	Kind   uint
}

type reflectlite.rtype struct {
	*abi.Type
}

uint64

type regexp.onePassInst struct {
	syntax.Inst
	Next []uint32
}

type regexp.onePassProg struct {
	Inst   []regexp.onePassInst
	Start  int
	NumCap int
}

[]int32

type rsa.CRTValue struct {
	Exp   *big.Int
	Coeff *big.Int
	R     *big.Int
}

type rsa.OAEPOptions struct {
	Hash    uint
	MGFHash uint
	Label   []uint8
}

type rsa.PKCS1v15DecryptOptions struct {
	SessionKeyLen int
}

type rsa.PSSOptions struct {
	SaltLength int
	Hash       uint
}

type rsa.PrivateKey struct {
	rsa.PublicKey
	D           *big.Int
	Primes      []*big.Int
	Precomputed rsa.PrecomputedValues
}

type rsa.PublicKey struct {
	N *big.Int
	E int
}

uint8

[32]uintptr

type runtime.dlogPerM struct{}

string

int

uintptr

uint32

uintptr

int

type runtime.lockRankStruct struct{}

int

func() uint64

uintptr

type runtime.pageTraceBuf struct{}

string

uintptr

[2]uint32

[]uint8

uint8

[1]uint64

string

uint32

uint8

uint64

uint16

uint32

uint64

uint8

type singleflight.Result struct {
	Val    interface{}
	Err    error
	Shared bool
}

type socks.Addr struct {
	Name string
	IP   []uint8
	Port int
}

int

int

type socks.UsernamePassword struct {
	Username string
	Password string
}

[]string

type strconv.NumError struct {
	Func string
	Num  string
	Err  error
}

string

[]uint8

[256]uint8

type struct { Generated string "json:\"generated\""; *realdebrid.Alias } struct{
	Generated string	`json:"generated"`
	*realdebrid.Alias
}

type struct { Layout string "json:\"layout\" yaml:\"layout\"" } struct{
	Layout string	`json:"layout" yaml:"layout"`
}

type struct { Level *zapcore.Level "json:\"level\"" } struct{
	Level *int8	`json:"level"`
}

type struct { Progress float64 "json:\"progress\""; Added string "json:\"added\""; *realdebrid.Alias } struct{
	Progress float64	`json:"progress"`
	Added string	`json:"added"`
	*realdebrid.Alias
}

type struct { Progress float64 "json:\"progress\""; Added string "json:\"added\""; Ended string "json:\"ended\""; *realdebrid.Alias } struct{
	Progress float64	`json:"progress"`
	Added string	`json:"added"`
	Ended string	`json:"ended"`
	*realdebrid.Alias
}

type struct { Progress float64 "json:\"progress\""; Added string "json:\"added\""; Ended string "json:\"ended\""; *realdebrid.Alias } struct{
	Progress float64	`json:"progress"`
	Added string	`json:"added"`
	Ended string	`json:"ended"`
	*realdebrid.Alias
}

type struct { SelectedFilesJson json.RawMessage "json:\"SelectedFiles\""; DownloadedIDsJson json.RawMessage "json:\"DownloadedIDs\""; InProgressIDsJson json.RawMessage "json:\"InProgressIDs\""; UnassignedLinksJson json.RawMessage "json:\"UnassignedLinks\""; *torrent.Alias } struct{
	SelectedFilesJson []uint8	`json:"SelectedFiles"`
	DownloadedIDsJson []uint8	`json:"DownloadedIDs"`
	InProgressIDsJson []uint8	`json:"InProgressIDs"`
	UnassignedLinksJson []uint8	`json:"UnassignedLinks"`
	*torrent.Alias
}

type struct { SelectedFilesJson json.RawMessage "json:\"SelectedFiles\""; DownloadedIDsJson json.RawMessage "json:\"DownloadedIDs\""; InProgressIDsJson json.RawMessage "json:\"InProgressIDs\""; UnassignedLinksJson json.RawMessage "json:\"UnassignedLinks\""; *torrent.Alias } struct{
	SelectedFilesJson []uint8	`json:"SelectedFiles"`
	DownloadedIDsJson []uint8	`json:"DownloadedIDs"`
	InProgressIDsJson []uint8	`json:"InProgressIDs"`
	UnassignedLinksJson []uint8	`json:"UnassignedLinks"`
	*torrent.Alias
}

type struct { io.Reader; io.Closer } struct{
	io.Reader
	io.Closer
}

type struct { io.Reader; io.WriterTo } struct{
	io.Reader
	io.WriterTo
}

type struct {} struct{}

uintptr

type sync.noCopy struct{}

uint32

uint8

type syntax.Error struct {
	Code string
	Expr string
}

string

uint16

type syntax.Inst struct {
	Op   uint8
	Out  uint32
	Arg  uint32
	Rune []int32
}

uint8

uint8

type syntax.Prog struct {
	Inst   []syntax.Inst
	Start  int
	NumCap int
}

type syntax.Regexp struct {
	Op    uint8
	Flags uint16
	Sub   []*syntax.Regexp
	Sub0  [1]*syntax.Regexp
	Rune  []int32
	Rune0 [2]int32
	Min   int
	Max   int
	Cap   int
	Name  string
}

type sys.nih struct{}

type syscall.Credential struct {
	Uid         uint32
	Gid         uint32
	Groups      []uint32
	NoSetGroups bool
}

uintptr

type syscall.IPMreq struct {
	Multiaddr [4]uint8
	Interface [4]uint8
}

type syscall.IPMreqn struct {
	Multiaddr [4]uint8
	Address   [4]uint8
	Ifindex   int32
}

type syscall.IPv6Mreq struct {
	Multiaddr [16]uint8
	Interface uint32
}

type syscall.Iovec struct {
	Base *uint8
	Len  uint64
}

type syscall.Linger struct {
	Onoff  int32
	Linger int32
}

type syscall.NetlinkMessage struct {
	Header syscall.NlMsghdr
	Data   []uint8
}

type syscall.NetlinkRouteAttr struct {
	Attr  syscall.RtAttr
	Value []uint8
}

type syscall.NlMsghdr struct {
	Len   uint32
	Type  uint16
	Flags uint16
	Seq   uint32
	Pid   uint32
}

type syscall.RawSockaddrInet4 struct {
	Family uint16
	Port   uint16
	Addr   [4]uint8
	Zero   [8]uint8
}

type syscall.RawSockaddrInet6 struct {
	Family   uint16
	Port     uint16
	Flowinfo uint32
	Addr     [16]uint8
	Scope_id uint32
}

type syscall.RawSockaddrLinklayer struct {
	Family   uint16
	Protocol uint16
	Ifindex  int32
	Hatype   uint16
	Pkttype  uint8
	Halen    uint8
	Addr     [8]uint8
}

type syscall.RawSockaddrNetlink struct {
	Family uint16
	Pad    uint16
	Pid    uint32
	Groups uint32
}

type syscall.RawSockaddrUnix struct {
	Family uint16
	Path   [108]int8
}

type syscall.Rlimit struct {
	Cur uint64
	Max uint64
}

type syscall.RtAttr struct {
	Len  uint16
	Type uint16
}

type syscall.Rusage struct {
	Utime    syscall.Timeval
	Stime    syscall.Timeval
	Maxrss   int64
	Ixrss    int64
	Idrss    int64
	Isrss    int64
	Minflt   int64
	Majflt   int64
	Nswap    int64
	Inblock  int64
	Oublock  int64
	Msgsnd   int64
	Msgrcv   int64
	Nsignals int64
	Nvcsw    int64
	Nivcsw   int64
}

int

type syscall.Stat_t struct {
	Dev       uint64
	Ino       uint64
	Nlink     uint64
	Mode      uint32
	Uid       uint32
	Gid       uint32
	X__pad0   int32
	Rdev      uint64
	Size      int64
	Blksize   int64
	Blocks    int64
	Atim      syscall.Timespec
	Mtim      syscall.Timespec
	Ctim      syscall.Timespec
	X__unused [3]int64
}

type syscall.SysProcAttr struct {
	Chroot                     string
	Credential                 *syscall.Credential
	Ptrace                     bool
	Setsid                     bool
	Setpgid                    bool
	Setctty                    bool
	Noctty                     bool
	Ctty                       int
	Foreground                 bool
	Pgid                       int
	Pdeathsig                  int
	Cloneflags                 uintptr
	Unshareflags               uintptr
	UidMappings                []syscall.SysProcIDMap
	GidMappings                []syscall.SysProcIDMap
	GidMappingsEnableSetgroups bool
	AmbientCaps                []uintptr
	UseCgroupFD                bool
	CgroupFD                   int
	PidFD                      *int
}

type syscall.SysProcIDMap struct {
	ContainerID int
	HostID      int
	Size        int
}

type syscall.Timespec struct {
	Sec  int64
	Nsec int64
}

type syscall.Timeval struct {
	Sec  int64
	Usec int64
}

uint32

uint32

uint32

type template.ExecError struct {
	Name string
	Err  error
}

map[string]interface {}

int

type template.missingValType struct{}

type template.writeError struct {
	Err error
}

type textproto.Error struct {
	Code int
	Msg  string
}

map[string][]string

string

int64

int

type time.ParseError struct {
	Layout     string
	Value      string
	LayoutElem string
	ValueElem  string
	Message    string
}

int

string

uint8

type tls.Certificate struct {
	Certificate                  [][]uint8
	PrivateKey                   crypto.PrivateKey
	SupportedSignatureAlgorithms []uint16
	OCSPStaple                   []uint8
	SignedCertificateTimestamps  [][]uint8
	Leaf                         *x509.Certificate
}

type tls.CertificateVerificationError struct {
	UnverifiedCertificates []*x509.Certificate
	Err                    error
}

int

uint16

int

type tls.QUICEvent struct {
	Kind  int
	Level int
	Data  []uint8
	Suite uint16
}

int

type tls.RecordHeaderError struct {
	Msg          string
	RecordHeader [5]uint8
	Conn         net.Conn
}

int

uint16

uint8

type tls.atLeastReader struct {
	R io.Reader
	N int64
}

type tls.certCache struct {
	sync.Map
}

type tls.endOfEarlyDataMsg struct{}

type tls.helloRequestMsg struct{}

type tls.rsaKeyAgreement struct{}

type tls.serverHelloDoneMsg struct{}

type torrent.Alias struct{
	Hash string	`json:"Hash"`
	Added string	`json:"Added"`
	UnassignedLinks mapset.Set[string]	`json:"UnassignedLinks"`
	DownloadedIDs mapset.Set[string]	`json:"DownloadedIDs"`
	InProgressIDs mapset.Set[string]	`json:"InProgressIDs"`
	Name string	`json:"Name"`
	OriginalName string	`json:"OriginalName"`
	Rename string	`json:"Rename"`
	SelectedFiles cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.File]	`json:"-"`
	UnrepairableReason string	`json:"Unfixable"`
	Version string	`json:"Version"`
}

type torrent.Alias struct{
	Hash string	`json:"Hash"`
	Added string	`json:"Added"`
	UnassignedLinks mapset.Set[string]	`json:"UnassignedLinks"`
	DownloadedIDs mapset.Set[string]	`json:"DownloadedIDs"`
	InProgressIDs mapset.Set[string]	`json:"InProgressIDs"`
	Name string	`json:"Name"`
	OriginalName string	`json:"OriginalName"`
	Rename string	`json:"Rename"`
	SelectedFiles cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.File]	`json:"-"`
	UnrepairableReason string	`json:"Unfixable"`
	Version string	`json:"Version"`
}

type torrent.File struct {
	realdebrid.File
	Ended     string `json:"Ended"`
	Link      string `json:"Link"`
	IsBroken  bool   `json:"IsBroken"`
	IsDeleted bool   `json:"IsDeleted"`
	Rename    string `json:"Rename"`
}

type torrent.LibraryState struct {
	TotalCount           int
	ActiveCount          int
	FirstActiveTorrentId string
	FirstTorrentId       string
}

type torrent.Torrent struct{
	Hash string	`json:"Hash"`
	Added string	`json:"Added"`
	UnassignedLinks mapset.Set[string]	`json:"UnassignedLinks"`
	DownloadedIDs mapset.Set[string]	`json:"DownloadedIDs"`
	InProgressIDs mapset.Set[string]	`json:"InProgressIDs"`
	Name string	`json:"Name"`
	OriginalName string	`json:"OriginalName"`
	Rename string	`json:"Rename"`
	SelectedFiles cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.File]	`json:"-"`
	UnrepairableReason string	`json:"Unfixable"`
	Version string	`json:"Version"`
}

uint

uint16

uint32

uint64

uint8

uintptr

type unicode.Range16 struct {
	Lo     uint16
	Hi     uint16
	Stride uint16
}

type unicode.Range32 struct {
	Lo     uint32
	Hi     uint32
	Stride uint32
}

type unicode.RangeTable struct {
	R16         []unicode.Range16
	R32         []unicode.Range32
	LatinOffset int
}

unsafe.Pointer

type unsafeheader.Slice struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

type unsafeheader.String struct {
	Data unsafe.Pointer
	Len  int
}

type url.Error struct {
	Op  string
	URL string
	Err error
}

string

string

type url.URL struct {
	Scheme      string
	Opaque      string
	User        *url.Userinfo
	Host        string
	Path        string
	RawPath     string
	OmitHost    bool
	ForceQuery  bool
	RawQuery    string
	Fragment    string
	RawFragment string
}

map[string][]string

type x509.Certificate struct {
	Raw                         []uint8
	RawTBSCertificate           []uint8
	RawSubjectPublicKeyInfo     []uint8
	RawSubject                  []uint8
	RawIssuer                   []uint8
	Signature                   []uint8
	SignatureAlgorithm          int
	PublicKeyAlgorithm          int
	PublicKey                   interface{}
	Version                     int
	SerialNumber                *big.Int
	Issuer                      pkix.Name
	Subject                     pkix.Name
	NotBefore                   time.Time
	NotAfter                    time.Time
	KeyUsage                    int
	Extensions                  []pkix.Extension
	ExtraExtensions             []pkix.Extension
	UnhandledCriticalExtensions [][]int
	ExtKeyUsage                 []int
	UnknownExtKeyUsage          [][]int
	BasicConstraintsValid       bool
	IsCA                        bool
	MaxPathLen                  int
	MaxPathLenZero              bool
	SubjectKeyId                []uint8
	AuthorityKeyId              []uint8
	OCSPServer                  []string
	IssuingCertificateURL       []string
	DNSNames                    []string
	EmailAddresses              []string
	IPAddresses                 [][]uint8
	URIs                        []*url.URL
	PermittedDNSDomainsCritical bool
	PermittedDNSDomains         []string
	ExcludedDNSDomains          []string
	PermittedIPRanges           []*net.IPNet
	ExcludedIPRanges            []*net.IPNet
	PermittedEmailAddresses     []string
	ExcludedEmailAddresses      []string
	PermittedURIDomains         []string
	ExcludedURIDomains          []string
	CRLDistributionPoints       []string
	PolicyIdentifiers           [][]int
	Policies                    []x509.OID
}

type x509.CertificateInvalidError struct {
	Cert   *x509.Certificate
	Reason int
	Detail string
}

type x509.ConstraintViolationError struct{}

int

type x509.HostnameError struct {
	Certificate *x509.Certificate
	Host        string
}

int

int

int

int

int

type x509.SystemRootsError struct {
	Err error
}

type x509.UnhandledCriticalExtension struct{}

type x509.VerifyOptions struct {
	DNSName                   string
	Intermediates             *x509.CertPool
	Roots                     *x509.CertPool
	CurrentTime               time.Time
	KeyUsages                 []int
	MaxConstraintComparisions int
}

type x509.authKeyId struct {
	Id []uint8 `asn1:"optional,tag:0"`
}

type x509.ecPrivateKey struct {
	Version       int
	PrivateKey    []uint8
	NamedCurveOID []int             `asn1:"optional,explicit,tag:0"`
	PublicKey     asn1.BitString `asn1:"optional,explicit,tag:1"`
}

type x509.pkcs1AdditionalRSAPrime struct {
	Prime *big.Int
	Exp   *big.Int
	Coeff *big.Int
}

type x509.pkcs1PrivateKey struct {
	Version          int
	N                *big.Int
	E                int
	D                *big.Int
	P                *big.Int
	Q                *big.Int
	Dp               *big.Int                       `asn1:"optional"`
	Dq               *big.Int                       `asn1:"optional"`
	Qinv             *big.Int                       `asn1:"optional"`
	AdditionalPrimes []x509.pkcs1AdditionalRSAPrime `asn1:"optional,omitempty"`
}

type x509.pkcs8 struct {
	Version    int
	Algo       pkix.AlgorithmIdentifier
	PrivateKey []uint8
}

type x509.pssParameters struct {
	Hash         pkix.AlgorithmIdentifier `asn1:"explicit,tag:0"`
	MGF          pkix.AlgorithmIdentifier `asn1:"explicit,tag:1"`
	SaltLength   int                         `asn1:"explicit,tag:2"`
	TrailerField int                         `asn1:"optional,explicit,tag:3,default:1"`
}

[28]uint8

type xml.Attr struct {
	Name  xml.Name
	Value string
}

[]uint8

[]uint8

[]uint8

type xml.EndElement struct {
	Name xml.Name
}

type xml.Name struct {
	Space string
	Local string
}

type xml.ProcInst struct {
	Target string
	Inst   []uint8
}

type xml.StartElement struct {
	Name xml.Name
	Attr []xml.Attr
}

type xml.SyntaxError struct {
	Msg  string
	Line int
}

type xml.TagPathError struct {
	Struct reflect.Type
	Field1 string
	Tag1   string
	Field2 string
	Tag2   string
}

string

type xml.UnsupportedTypeError struct {
	Type reflect.Type
}

int

uint32

type yaml.Node struct{
	Kind uint32
	Style uint32
	Tag string
	Value string
	Anchor string
	Alias *<nil>
	Content []*yaml.Node
	HeadComment string
	LineComment string
	FootComment string
	Line int
	Column int
}

uint32

type yaml.TypeError struct {
	Errors []string
}

type yaml.fieldInfo struct {
	Key       string
	Num       int
	OmitEmpty bool
	Flow      bool
	Id        int
	Inline    []int
}

[]reflect.Value

type yaml.structInfo struct {
	FieldsMap          map[string]yaml.fieldInfo
	FieldsList         []yaml.fieldInfo
	InlineMap          int
	InlineUnmarshalers [][]int
}

int

int

int

int

int8

int8

int

int

int

func(*yaml.yaml_parser_t, []uint8) (int, error)

int8

int8

int8

int

func(*yaml.yaml_emitter_t, []uint8) error

func(string, *bool) zapcore.Field

func(string, *complex128) zapcore.Field

func(string, *complex64) zapcore.Field

func(string, *float32) zapcore.Field

func(string, *float64) zapcore.Field

func(string, *int16) zapcore.Field

func(string, *int32) zapcore.Field

func(string, *int64) zapcore.Field

func(string, *int8) zapcore.Field

func(string, *int) zapcore.Field

func(string, *string) zapcore.Field

func(string, *int64) zapcore.Field

func(string, *time.Time) zapcore.Field

func(string, *uint16) zapcore.Field

func(string, *uint32) zapcore.Field

func(string, *uint64) zapcore.Field

func(string, *uint8) zapcore.Field

func(string, *uint) zapcore.Field

func(string, *uintptr) zapcore.Field

func(string, []bool) zapcore.Field

func(string, []complex128) zapcore.Field

func(string, []complex64) zapcore.Field

func(string, []error) zapcore.Field

func(string, []float32) zapcore.Field

func(string, []float64) zapcore.Field

func(string, []zapcore.Field) zapcore.Field

func(string, []int16) zapcore.Field

func(string, []int32) zapcore.Field

func(string, []int64) zapcore.Field

func(string, []int8) zapcore.Field

func(string, []int) zapcore.Field

func(string, []string) zapcore.Field

func(string, []int64) zapcore.Field

func(string, []time.Time) zapcore.Field

func(string, []uint16) zapcore.Field

func(string, []uint32) zapcore.Field

func(string, []uint64) zapcore.Field

func(string, []uint8) zapcore.Field

func(string, []uint) zapcore.Field

func(string, []uintptr) zapcore.Field

func(string, bool) zapcore.Field

func(string, complex128) zapcore.Field

func(string, complex64) zapcore.Field

func(string, error) zapcore.Field

func(string, float32) zapcore.Field

func(string, float64) zapcore.Field

func(string, fmt.Stringer) zapcore.Field

func(string, zapcore.ArrayMarshaler) zapcore.Field

func(string, zapcore.ObjectMarshaler) zapcore.Field

func(string, int16) zapcore.Field

func(string, int32) zapcore.Field

func(string, int64) zapcore.Field

func(string, int8) zapcore.Field

func(string, int) zapcore.Field

func(string, interface {}) zapcore.Field

func(string, string) zapcore.Field

func(string, int64) zapcore.Field

func(string, time.Time) zapcore.Field

func(string, uint16) zapcore.Field

func(string, uint32) zapcore.Field

func(string, uint64) zapcore.Field

func(string, uint8) zapcore.Field

func(string, uint) zapcore.Field

func(string, uintptr) zapcore.Field

[]bool

[]complex128

[]complex64

[]zapcore.Field

[]int64

[]error

type zap.errorResponse struct {
	Error string `json:"error"`
}

[]float32

[]float64

[]int16

[]int32

[]int64

[]int8

[]int

[]zap.invalidPair

type zap.nopCloserSink struct {
	zapcore.WriteSyncer
}

func(*zap.Logger)

type zap.payload struct {
	Level int8 `json:"level"`
}

[]string

[]time.Time

[]uint16

[]uint32

[]uint64

[]uintptr

[]uint

func(zapcore.EntryCaller, zapcore.PrimitiveArrayEncoder)

uint8

func(int64, zapcore.PrimitiveArrayEncoder)

type zapcore.EncoderConfig struct {
	MessageKey          string                                                         `json:"messageKey" yaml:"messageKey"`
	LevelKey            string                                                         `json:"levelKey" yaml:"levelKey"`
	TimeKey             string                                                         `json:"timeKey" yaml:"timeKey"`
	NameKey             string                                                         `json:"nameKey" yaml:"nameKey"`
	CallerKey           string                                                         `json:"callerKey" yaml:"callerKey"`
	FunctionKey         string                                                         `json:"functionKey" yaml:"functionKey"`
	StacktraceKey       string                                                         `json:"stacktraceKey" yaml:"stacktraceKey"`
	SkipLineEnding      bool                                                           `json:"skipLineEnding" yaml:"skipLineEnding"`
	LineEnding          string                                                         `json:"lineEnding" yaml:"lineEnding"`
	EncodeLevel         func(int8, zapcore.PrimitiveArrayEncoder)                   `json:"levelEncoder" yaml:"levelEncoder"`
	EncodeTime          func(time.Time, zapcore.PrimitiveArrayEncoder)           `json:"timeEncoder" yaml:"timeEncoder"`
	EncodeDuration      func(int64, zapcore.PrimitiveArrayEncoder)                  `json:"durationEncoder" yaml:"durationEncoder"`
	EncodeCaller        func(zapcore.EntryCaller, zapcore.PrimitiveArrayEncoder) `json:"callerEncoder" yaml:"callerEncoder"`
	EncodeName          func(string, zapcore.PrimitiveArrayEncoder)                 `json:"nameEncoder" yaml:"nameEncoder"`
	NewReflectedEncoder func(io.Writer) zapcore.ReflectedEncoder                 `json:"-" yaml:"-"`
	ConsoleSeparator    string                                                         `json:"consoleSeparator" yaml:"consoleSeparator"`
}

type zapcore.Entry struct {
	Level      int8
	Time       time.Time
	LoggerName string
	Message    string
	Caller     zapcore.EntryCaller
	Stack      string
}

type zapcore.EntryCaller struct {
	Defined  bool
	PC       uintptr
	File     string
	Line     int
	Function string
}

type zapcore.Field struct {
	Key       string
	Type      uint8
	Integer   int64
	String    string
	Interface interface{}
}

uint8

int8

func(int8, zapcore.PrimitiveArrayEncoder)

func(string, zapcore.PrimitiveArrayEncoder)

func(time.Time, zapcore.PrimitiveArrayEncoder)

[]error

[]zapcore.Core

type zapcore.nopCore struct{}

type zapcore.systemClock struct{}

type zapcore.writerWrapper struct {
	io.Writer
}

type config.ConfigInterface interface {
	EnableDownloadMount() bool
	EnableRepair() bool
	EnableRetainFolderNameExtension() bool
	EnableRetainRDTorrentName() bool
	GetAPIRateLimitPerMinute() int
	GetApiTimeoutSecs() int
	GetConfig() config.ZurgConfig
	GetDirectories() []string
	GetDownloadTimeoutSecs() int
	GetDownloadsEveryMins() int
	GetHost() string
	GetNetworkBufferSize() int
	GetNumOfWorkers() int
	GetOnLibraryUpdate() string
	GetPassword() string
	GetPlayableExtensions() []string
	GetPort() string
	GetProxy() string
	GetRateLimitSleepSecs() int
	GetRefreshEverySecs() int
	GetRepairEveryMins() int
	GetRetriesUntilFailed() int
	GetToken() string
	GetTorrentsCount() int
	GetTorrentsRateLimitPerMinute() int
	GetUsername() string
	GetVersion() string
	MeetsConditions(string, string, int64, []string, []string, []int64) bool
	ShouldDeleteRarFiles() bool
	ShouldForceIPv6() bool
	ShouldIgnoreRenames() bool
	ShouldServeFromRclone() bool
}
type config.ZurgConfigV1 struct {
	config.ZurgConfig `yaml:",inline"`
	Directories          map[string]*config.Directory `yaml:"directories"`
	log                  *logutil.Logger
}

type handlers.Handlers struct {
	downloader *universal.Downloader
	torMgr     *torrent.TorrentManager
	cfg        config.ConfigInterface
	api        *realdebrid.RealDebrid
	workerPool *ants.Pool
	log        *logutil.Logger
}

type torrent.TorrentManager struct{
	Config config.ConfigInterface
	Api *realdebrid.RealDebrid
	DirectoryMap cmap.ConcurrentMap[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]
	DownloadCache cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]
	DownloadMap cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]
	fixers cmap.ConcurrentMap[string,string]
	allAccessKeys mapset.Set[string]
	allIDs mapset.Set[string]
	latestState *torrent.LibraryState
	requiredVersion string
	workerPool *ants.Pool
	RefreshKillSwitch chan struct {}
	RepairKillSwitch chan struct {}
	RemountTrigger chan struct {}
	repairTrigger chan *torrent.Torrent
	repairSet mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	repairRunning bool
	repairRunningMu sync.Mutex
	log *logutil.Logger
}

type universal.Downloader struct {
	client *http.HTTPClient
}

type http.HTTPClient struct {
	client         *http.Client
	maxRetries     int
	timeoutSecs    int
	backoff        func(int) int64
	bearerToken    string
	ensureIPv6Host bool
	cfg            config.ConfigInterface
	ipv6           cmap.ConcurrentMap[string, string]
	ipv6Hosts      []string
	rateLimiter    *http.RateLimiter
	log            *logutil.Logger
}

type http.RateLimiter struct {
	ticker *time.Ticker
}

type logutil.Logger struct {
	*zap.SugaredLogger
	logPath string
}

type realdebrid.RealDebrid struct {
	client              *http.HTTPClient
	unrestrictClient    *http.HTTPClient
	downloadClient      *http.HTTPClient
	torrentsRateLimiter *http.RateLimiter
	cfg                 config.ConfigInterface
	log                 *logutil.Logger
}

type mapset.Iterator [*github.com / debridmediamanager / zurg / internal / torrent.Torrent]struct {
	C    <-chan *torrent.Torrent
	stop chan struct{}
}

type mapset.Iterator [go.shape. * github.com / debridmediamanager / zurg / internal / torrent.Torrent]struct {
	C    <-chan *torrent.Torrent
	stop chan struct{}
}

type mapset.Iterator [go.shape.int]struct {
	C    <-chan int
	stop chan struct{}
}

type mapset.Iterator [go.shape.string]struct {
	C    <-chan string
	stop chan struct{}
}

type mapset.Iterator [int]struct {
	C    <-chan int
	stop chan struct{}
}

type mapset.Iterator [string]struct {
	C    <-chan string
	stop chan struct{}
}

type mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent] interface {
	Add(*torrent.Torrent) bool
	Append([]*torrent.Torrent) int
	Cardinality() int
	Clear()
	Clone() mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	Contains([]*torrent.Torrent) bool
	ContainsAny([]*torrent.Torrent) bool
	ContainsOne(*torrent.Torrent) bool
	Difference(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	Each(func(*torrent.Torrent) bool)
	Equal(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) bool
	Intersect(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	IsEmpty() bool
	IsProperSubset(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) bool
	IsProperSuperset(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) bool
	IsSubset(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) bool
	IsSuperset(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) bool
	Iter() <-chan *torrent.Torrent
	Iterator() *mapset.Iterator[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	MarshalJSON() ([]uint8, error)
	Pop() (*torrent.Torrent, bool)
	Remove(*torrent.Torrent)
	RemoveAll([]*torrent.Torrent)
	String() string
	SymmetricDifference(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	ToSlice() []*torrent.Torrent
	Union(mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]) mapset.Set[*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	UnmarshalJSON([]uint8) error
}
type mapset.Set [int]interface {
	Add(int) bool
	Append([]int) int
	Cardinality() int
	Clear()
	Clone() mapset.Set[int]
	Contains([]int) bool
	ContainsAny([]int) bool
	ContainsOne(int) bool
	Difference(mapset.Set[int]) mapset.Set[int]
	Each(func(int) bool)
	Equal(mapset.Set[int]) bool
	Intersect(mapset.Set[int]) mapset.Set[int]
	IsEmpty() bool
	IsProperSubset(mapset.Set[int]) bool
	IsProperSuperset(mapset.Set[int]) bool
	IsSubset(mapset.Set[int]) bool
	IsSuperset(mapset.Set[int]) bool
	Iter() <-chan int
	Iterator() *mapset.Iterator[int]
	MarshalJSON() ([]uint8, error)
	Pop() (int, bool)
	Remove(int)
	RemoveAll([]int)
	String() string
	SymmetricDifference(mapset.Set[int]) mapset.Set[int]
	ToSlice() []int
	Union(mapset.Set[int]) mapset.Set[int]
	UnmarshalJSON([]uint8) error
}
type mapset.Set [string]interface {
	Add(string) bool
	Append([]string) int
	Cardinality() int
	Clear()
	Clone() mapset.Set[string]
	Contains([]string) bool
	ContainsAny([]string) bool
	ContainsOne(string) bool
	Difference(mapset.Set[string]) mapset.Set[string]
	Each(func(string) bool)
	Equal(mapset.Set[string]) bool
	Intersect(mapset.Set[string]) mapset.Set[string]
	IsEmpty() bool
	IsProperSubset(mapset.Set[string]) bool
	IsProperSuperset(mapset.Set[string]) bool
	IsSubset(mapset.Set[string]) bool
	IsSuperset(mapset.Set[string]) bool
	Iter() <-chan string
	Iterator() *mapset.Iterator[string]
	MarshalJSON() ([]uint8, error)
	Pop() (string, bool)
	Remove(string)
	RemoveAll([]string)
	String() string
	SymmetricDifference(mapset.Set[string]) mapset.Set[string]
	ToSlice() []string
	Union(mapset.Set[string]) mapset.Set[string]
	UnmarshalJSON([]uint8) error
}
type mapset.threadSafeSet [*github.com / debridmediamanager / zurg / internal / torrent.Torrent]struct {
	sync.RWMutex
	uss map[*torrent.Torrent]struct{}
}

type mapset.threadSafeSet [go.shape. * github.com / debridmediamanager / zurg / internal / torrent.Torrent]struct {
	sync.RWMutex
	uss map[*torrent.Torrent]struct{}
}

type mapset.threadSafeSet [go.shape.int]struct {
	sync.RWMutex
	uss map[int]struct{}
}

type mapset.threadSafeSet [go.shape.string]struct {
	sync.RWMutex
	uss map[string]struct{}
}

type mapset.threadSafeSet [int]struct {
	sync.RWMutex
	uss map[int]struct{}
}

type mapset.threadSafeSet [string]struct {
	sync.RWMutex
	uss map[string]struct{}
}

type chi.ChainHandler struct {
	Endpoint    http.Handler
	chain       http.Handler
	Middlewares []func(http.Handler) http.Handler
}

type chi.Context struct {
	Routes           chi.Routes
	parentCtx        context.Context
	RoutePath        string
	RouteMethod      string
	URLParams        chi.RouteParams
	routeParams      chi.RouteParams
	routePattern     string
	RoutePatterns    []string
	methodNotAllowed bool
	methodsAllowed   []uint
}

type chi.Mux struct{
	handler http.Handler
	tree *chi.node
	methodNotAllowedHandler func(http.ResponseWriter, *http.Request)
	parent *<nil>
	pool *sync.Pool
	notFoundHandler func(http.ResponseWriter, *http.Request)
	middlewares []func(http.Handler) http.Handler
	inline bool
}

type chi.Router interface {
	Connect(string, func(http.ResponseWriter, *http.Request))
	Delete(string, func(http.ResponseWriter, *http.Request))
	Get(string, func(http.ResponseWriter, *http.Request))
	Group(func(chi.Router)) chi.Router
	Handle(string, http.Handler)
	HandleFunc(string, func(http.ResponseWriter, *http.Request))
	Head(string, func(http.ResponseWriter, *http.Request))
	Match(*chi.Context, string, string) bool
	Method(string, string, http.Handler)
	MethodFunc(string, string, func(http.ResponseWriter, *http.Request))
	MethodNotAllowed(func(http.ResponseWriter, *http.Request))
	Middlewares() []func(http.Handler) http.Handler
	Mount(string, http.Handler)
	NotFound(func(http.ResponseWriter, *http.Request))
	Options(string, func(http.ResponseWriter, *http.Request))
	Patch(string, func(http.ResponseWriter, *http.Request))
	Post(string, func(http.ResponseWriter, *http.Request))
	Put(string, func(http.ResponseWriter, *http.Request))
	Route(string, func(chi.Router)) chi.Router
	Routes() []chi.Route
	ServeHTTP(http.ResponseWriter, *http.Request)
	Trace(string, func(http.ResponseWriter, *http.Request))
	Use([]func(http.Handler) http.Handler)
	With([]func(http.Handler) http.Handler) chi.Router
}
type chi.Routes interface {
	Match(*chi.Context, string, string) bool
	Middlewares() []func(http.Handler) http.Handler
	Routes() []chi.Route
}
type chi.contextKey struct {
	name string
}

type chi.endpoint struct {
	handler   http.Handler
	pattern   string
	paramKeys []string
}

type chi.node struct {
	subroutes chi.Routes
	rex       *regexp.Regexp
	endpoints map[uint]*chi.endpoint
	prefix    string
	children  [4][]*chi.node
	tail      uint8
	typ       uint8
	label     uint8
}

type jsoniter.API interface {
	BorrowIterator([]uint8) *jsoniter.Iterator
	BorrowStream(io.Writer) *jsoniter.Stream
	DecoderOf(reflect2.Type) jsoniter.ValDecoder
	EncoderOf(reflect2.Type) jsoniter.ValEncoder
	Get([]uint8, []interface{}) jsoniter.Any
	Marshal(interface{}) ([]uint8, error)
	MarshalIndent(interface{}, string, string) ([]uint8, error)
	MarshalToString(interface{}) (string, error)
	NewDecoder(io.Reader) *jsoniter.Decoder
	NewEncoder(io.Writer) *jsoniter.Encoder
	RegisterExtension(jsoniter.Extension)
	ReturnIterator(*jsoniter.Iterator)
	ReturnStream(*jsoniter.Stream)
	Unmarshal([]uint8, interface{}) error
	UnmarshalFromString(string, interface{}) error
	Valid([]uint8) bool
}
type jsoniter.Any interface {
	Get([]interface{}) jsoniter.Any
	GetInterface() interface{}
	Keys() []string
	LastError() error
	MustBeValid() jsoniter.Any
	Size() int
	ToBool() bool
	ToFloat32() float32
	ToFloat64() float64
	ToInt() int
	ToInt32() int32
	ToInt64() int64
	ToString() string
	ToUint() uint
	ToUint32() uint32
	ToUint64() uint64
	ToVal(interface{})
	ValueType() int
	WriteTo(*jsoniter.Stream)
}
type jsoniter.Binding struct {
	levels    []int
	Field     reflect2.StructField
	FromNames []string
	ToNames   []string
	Encoder   jsoniter.ValEncoder
	Decoder   jsoniter.ValDecoder
}

type jsoniter.Decoder struct{
	iter *<nil>
}

type jsoniter.Encoder struct{
	stream *<nil>
}

type jsoniter.Extension interface {
	CreateDecoder(reflect2.Type) jsoniter.ValDecoder
	CreateEncoder(reflect2.Type) jsoniter.ValEncoder
	CreateMapKeyDecoder(reflect2.Type) jsoniter.ValDecoder
	CreateMapKeyEncoder(reflect2.Type) jsoniter.ValEncoder
	DecorateDecoder(reflect2.Type, jsoniter.ValDecoder) jsoniter.ValDecoder
	DecorateEncoder(reflect2.Type, jsoniter.ValEncoder) jsoniter.ValEncoder
	UpdateStructDescriptor(*jsoniter.StructDescriptor)
}
type jsoniter.IsEmbeddedPtrNil interface {
	IsEmbeddedPtrNil(unsafe.Pointer) bool
}
type jsoniter.Iterator struct {
	cfg              *jsoniter.frozenConfig
	reader           io.Reader
	buf              []uint8
	head             int
	tail             int
	depth            int
	captureStartedAt int
	captured         []uint8
	Error            error
	Attachment       interface{}
}

type jsoniter.IteratorPool interface {
	BorrowIterator([]uint8) *jsoniter.Iterator
	ReturnIterator(*jsoniter.Iterator)
}
type jsoniter.Stream struct {
	cfg        *jsoniter.frozenConfig
	out        io.Writer
	buf        []uint8
	Error      error
	indention  int
	Attachment interface{}
}

type jsoniter.StreamPool interface {
	BorrowStream(io.Writer) *jsoniter.Stream
	ReturnStream(*jsoniter.Stream)
}
type jsoniter.ValDecoder interface {
	Decode(unsafe.Pointer, *jsoniter.Iterator)
}
type jsoniter.ValEncoder interface {
	Encode(unsafe.Pointer, *jsoniter.Stream)
	IsEmpty(unsafe.Pointer) bool
}
type jsoniter.anyCodec struct {
	valType reflect2.Type
}

type jsoniter.arrayAny struct {
	jsoniter.baseAny
	val reflect.Value
}

type jsoniter.arrayDecoder struct {
	arrayType   *reflect2.UnsafeArrayType
	elemDecoder jsoniter.ValDecoder
}

type jsoniter.arrayEncoder struct {
	arrayType   *reflect2.UnsafeArrayType
	elemEncoder jsoniter.ValEncoder
}

type jsoniter.arrayLazyAny struct {
	jsoniter.baseAny
	cfg *jsoniter.frozenConfig
	buf []uint8
	err error
}

type jsoniter.base64Codec struct {
	sliceType    *reflect2.UnsafeSliceType
	sliceDecoder jsoniter.ValDecoder
}

type jsoniter.bindingTo struct {
	binding *jsoniter.Binding
	toName  string
	ignored bool
}

type jsoniter.checkIsEmpty interface {
	IsEmpty(unsafe.Pointer) bool
}
type jsoniter.ctx struct {
	*jsoniter.frozenConfig
	prefix   string
	encoders map[reflect2.Type]jsoniter.ValEncoder
	decoders map[reflect2.Type]jsoniter.ValDecoder
}

type jsoniter.dereferenceDecoder struct {
	valueType    reflect2.Type
	valueDecoder jsoniter.ValDecoder
}

type jsoniter.directMarshalerEncoder struct {
	checkIsEmpty jsoniter.checkIsEmpty
}

type jsoniter.directTextMarshalerEncoder struct {
	stringEncoder jsoniter.ValEncoder
	checkIsEmpty  jsoniter.checkIsEmpty
}

type jsoniter.dynamicEncoder struct {
	valType reflect2.Type
}

type jsoniter.dynamicMapKeyEncoder struct {
	ctx     *jsoniter.ctx
	valType reflect2.Type
}

type jsoniter.eightFieldsStructDecoder struct {
	typ           reflect2.Type
	fieldHash1    int64
	fieldDecoder1 *jsoniter.structFieldDecoder
	fieldHash2    int64
	fieldDecoder2 *jsoniter.structFieldDecoder
	fieldHash3    int64
	fieldDecoder3 *jsoniter.structFieldDecoder
	fieldHash4    int64
	fieldDecoder4 *jsoniter.structFieldDecoder
	fieldHash5    int64
	fieldDecoder5 *jsoniter.structFieldDecoder
	fieldHash6    int64
	fieldDecoder6 *jsoniter.structFieldDecoder
	fieldHash7    int64
	fieldDecoder7 *jsoniter.structFieldDecoder
	fieldHash8    int64
	fieldDecoder8 *jsoniter.structFieldDecoder
}

type jsoniter.encodedKV struct {
	key      string
	keyValue []uint8
}

type jsoniter.falseAny struct {
	jsoniter.baseAny
}

type jsoniter.fiveFieldsStructDecoder struct {
	typ           reflect2.Type
	fieldHash1    int64
	fieldDecoder1 *jsoniter.structFieldDecoder
	fieldHash2    int64
	fieldDecoder2 *jsoniter.structFieldDecoder
	fieldHash3    int64
	fieldDecoder3 *jsoniter.structFieldDecoder
	fieldHash4    int64
	fieldDecoder4 *jsoniter.structFieldDecoder
	fieldHash5    int64
	fieldDecoder5 *jsoniter.structFieldDecoder
}

type jsoniter.floatAny struct {
	jsoniter.baseAny
	val float64
}

type jsoniter.fourFieldsStructDecoder struct {
	typ           reflect2.Type
	fieldHash1    int64
	fieldDecoder1 *jsoniter.structFieldDecoder
	fieldHash2    int64
	fieldDecoder2 *jsoniter.structFieldDecoder
	fieldHash3    int64
	fieldDecoder3 *jsoniter.structFieldDecoder
	fieldHash4    int64
	fieldDecoder4 *jsoniter.structFieldDecoder
}

type jsoniter.frozenConfig struct {
	configBeforeFrozen            jsoniter.Config
	sortMapKeys                   bool
	indentionStep                 int
	objectFieldMustBeSimpleString bool
	onlyTaggedField               bool
	disallowUnknownFields         bool
	decoderCache                  *concurrent.Map
	encoderCache                  *concurrent.Map
	encoderExtension              jsoniter.Extension
	decoderExtension              jsoniter.Extension
	extraExtensions               []jsoniter.Extension
	streamPool                    *sync.Pool
	iteratorPool                  *sync.Pool
	caseSensitive                 bool
}

type jsoniter.funcDecoder struct {
	fun func(unsafe.Pointer, *jsoniter.Iterator)
}

type jsoniter.funcEncoder struct {
	fun         func(unsafe.Pointer, *jsoniter.Stream)
	isEmptyFunc func(unsafe.Pointer) bool
}

type jsoniter.generalStructDecoder struct {
	typ                   reflect2.Type
	fields                map[string]*jsoniter.structFieldDecoder
	disallowUnknownFields bool
}

type jsoniter.ifaceDecoder struct {
	valType *reflect2.UnsafeIFaceType
}

type jsoniter.int32Any struct {
	jsoniter.baseAny
	val int32
}

type jsoniter.int64Any struct {
	jsoniter.baseAny
	val int64
}

type jsoniter.invalidAny struct {
	jsoniter.baseAny
	err error
}

type jsoniter.lazyErrorDecoder struct {
	err error
}

type jsoniter.lazyErrorEncoder struct {
	err error
}

type jsoniter.mapAny struct {
	jsoniter.baseAny
	err error
	val reflect.Value
}

type jsoniter.mapDecoder struct {
	mapType     *reflect2.UnsafeMapType
	keyType     reflect2.Type
	elemType    reflect2.Type
	keyDecoder  jsoniter.ValDecoder
	elemDecoder jsoniter.ValDecoder
}

type jsoniter.mapEncoder struct {
	mapType     *reflect2.UnsafeMapType
	keyEncoder  jsoniter.ValEncoder
	elemEncoder jsoniter.ValEncoder
}

type jsoniter.marshalerEncoder struct {
	checkIsEmpty jsoniter.checkIsEmpty
	valType      reflect2.Type
}

type jsoniter.nilAny struct {
	jsoniter.baseAny
}

type jsoniter.nineFieldsStructDecoder struct {
	typ           reflect2.Type
	fieldHash1    int64
	fieldDecoder1 *jsoniter.structFieldDecoder
	fieldHash2    int64
	fieldDecoder2 *jsoniter.structFieldDecoder
	fieldHash3    int64
	fieldDecoder3 *jsoniter.structFieldDecoder
	fieldHash4    int64
	fieldDecoder4 *jsoniter.structFieldDecoder
	fieldHash5    int64
	fieldDecoder5 *jsoniter.structFieldDecoder
	fieldHash6    int64
	fieldDecoder6 *jsoniter.structFieldDecoder
	fieldHash7    int64
	fieldDecoder7 *jsoniter.structFieldDecoder
	fieldHash8    int64
	fieldDecoder8 *jsoniter.structFieldDecoder
	fieldHash9    int64
	fieldDecoder9 *jsoniter.structFieldDecoder
}

type jsoniter.numberLazyAny struct {
	jsoniter.baseAny
	cfg *jsoniter.frozenConfig
	buf []uint8
	err error
}

type jsoniter.numericMapKeyDecoder struct {
	decoder jsoniter.ValDecoder
}

type jsoniter.numericMapKeyEncoder struct {
	encoder jsoniter.ValEncoder
}

type jsoniter.objectAny struct {
	jsoniter.baseAny
	err error
	val reflect.Value
}

type jsoniter.objectLazyAny struct {
	jsoniter.baseAny
	cfg *jsoniter.frozenConfig
	buf []uint8
	err error
}

type jsoniter.oneFieldStructDecoder struct {
	typ          reflect2.Type
	fieldHash    int64
	fieldDecoder *jsoniter.structFieldDecoder
}

type jsoniter.onePtrEncoder struct {
	encoder jsoniter.ValEncoder
}

type jsoniter.placeholderDecoder struct {
	decoder jsoniter.ValDecoder
}

type jsoniter.placeholderEncoder struct {
	encoder jsoniter.ValEncoder
}

type jsoniter.referenceDecoder struct {
	decoder jsoniter.ValDecoder
}

type jsoniter.referenceEncoder struct {
	encoder jsoniter.ValEncoder
}

type jsoniter.sevenFieldsStructDecoder struct {
	typ           reflect2.Type
	fieldHash1    int64
	fieldDecoder1 *jsoniter.structFieldDecoder
	fieldHash2    int64
	fieldDecoder2 *jsoniter.structFieldDecoder
	fieldHash3    int64
	fieldDecoder3 *jsoniter.structFieldDecoder
	fieldHash4    int64
	fieldDecoder4 *jsoniter.structFieldDecoder
	fieldHash5    int64
	fieldDecoder5 *jsoniter.structFieldDecoder
	fieldHash6    int64
	fieldDecoder6 *jsoniter.structFieldDecoder
	fieldHash7    int64
	fieldDecoder7 *jsoniter.structFieldDecoder
}

type jsoniter.sixFieldsStructDecoder struct {
	typ           reflect2.Type
	fieldHash1    int64
	fieldDecoder1 *jsoniter.structFieldDecoder
	fieldHash2    int64
	fieldDecoder2 *jsoniter.structFieldDecoder
	fieldHash3    int64
	fieldDecoder3 *jsoniter.structFieldDecoder
	fieldHash4    int64
	fieldDecoder4 *jsoniter.structFieldDecoder
	fieldHash5    int64
	fieldDecoder5 *jsoniter.structFieldDecoder
	fieldHash6    int64
	fieldDecoder6 *jsoniter.structFieldDecoder
}

type jsoniter.skipObjectDecoder struct {
	typ reflect2.Type
}

type jsoniter.sliceDecoder struct {
	sliceType   *reflect2.UnsafeSliceType
	elemDecoder jsoniter.ValDecoder
}

type jsoniter.sliceEncoder struct {
	sliceType   *reflect2.UnsafeSliceType
	elemEncoder jsoniter.ValEncoder
}

type jsoniter.sortKeysMapEncoder struct {
	mapType     *reflect2.UnsafeMapType
	keyEncoder  jsoniter.ValEncoder
	elemEncoder jsoniter.ValEncoder
}

type jsoniter.stringAny struct {
	jsoniter.baseAny
	val string
}

type jsoniter.stringModeNumberDecoder struct {
	elemDecoder jsoniter.ValDecoder
}

type jsoniter.stringModeNumberEncoder struct {
	elemEncoder jsoniter.ValEncoder
}

type jsoniter.stringModeStringDecoder struct {
	elemDecoder jsoniter.ValDecoder
	cfg         *jsoniter.frozenConfig
}

type jsoniter.stringModeStringEncoder struct {
	elemEncoder jsoniter.ValEncoder
	cfg         *jsoniter.frozenConfig
}

type jsoniter.structEncoder struct {
	typ    reflect2.Type
	fields []jsoniter.structFieldTo
}

type jsoniter.structFieldDecoder struct {
	field        reflect2.StructField
	fieldDecoder jsoniter.ValDecoder
}

type jsoniter.structFieldEncoder struct {
	field        reflect2.StructField
	fieldEncoder jsoniter.ValEncoder
	omitempty    bool
}

type jsoniter.structFieldTo struct {
	encoder *jsoniter.structFieldEncoder
	toName  string
}

type jsoniter.tenFieldsStructDecoder struct {
	typ            reflect2.Type
	fieldHash1     int64
	fieldDecoder1  *jsoniter.structFieldDecoder
	fieldHash2     int64
	fieldDecoder2  *jsoniter.structFieldDecoder
	fieldHash3     int64
	fieldDecoder3  *jsoniter.structFieldDecoder
	fieldHash4     int64
	fieldDecoder4  *jsoniter.structFieldDecoder
	fieldHash5     int64
	fieldDecoder5  *jsoniter.structFieldDecoder
	fieldHash6     int64
	fieldDecoder6  *jsoniter.structFieldDecoder
	fieldHash7     int64
	fieldDecoder7  *jsoniter.structFieldDecoder
	fieldHash8     int64
	fieldDecoder8  *jsoniter.structFieldDecoder
	fieldHash9     int64
	fieldDecoder9  *jsoniter.structFieldDecoder
	fieldHash10    int64
	fieldDecoder10 *jsoniter.structFieldDecoder
}

type jsoniter.textMarshalerEncoder struct {
	valType       reflect2.Type
	stringEncoder jsoniter.ValEncoder
	checkIsEmpty  jsoniter.checkIsEmpty
}

type jsoniter.textUnmarshalerDecoder struct {
	valType reflect2.Type
}

type jsoniter.threeFieldsStructDecoder struct {
	typ           reflect2.Type
	fieldHash1    int64
	fieldDecoder1 *jsoniter.structFieldDecoder
	fieldHash2    int64
	fieldDecoder2 *jsoniter.structFieldDecoder
	fieldHash3    int64
	fieldDecoder3 *jsoniter.structFieldDecoder
}

type jsoniter.trueAny struct {
	jsoniter.baseAny
}

type jsoniter.twoFieldsStructDecoder struct {
	typ           reflect2.Type
	fieldHash1    int64
	fieldDecoder1 *jsoniter.structFieldDecoder
	fieldHash2    int64
	fieldDecoder2 *jsoniter.structFieldDecoder
}

type jsoniter.uint32Any struct {
	jsoniter.baseAny
	val uint32
}

type jsoniter.uint64Any struct {
	jsoniter.baseAny
	val uint64
}

type jsoniter.unmarshalerDecoder struct {
	valType reflect2.Type
}

type concurrent.UnboundedExecutor struct {
	ctx                   context.Context
	cancel                func()
	activeGoroutinesMutex *sync.Mutex
	activeGoroutines      map[string]int
}

type reflect2.MapIterator interface {
	HasNext() bool
	Next() (interface{}, interface{})
	UnsafeNext() (unsafe.Pointer, unsafe.Pointer)
}
type reflect2.MapType interface {
	AssignableTo(reflect2.Type) bool
	Elem() reflect2.Type
	GetIndex(interface{}, interface{}) interface{}
	Implements(reflect2.Type) bool
	Indirect(interface{}) interface{}
	IsNil(interface{}) bool
	IsNullable() bool
	Iterate(interface{}) reflect2.MapIterator
	Key() reflect2.Type
	Kind() uint
	LikePtr() bool
	MakeMap(int) interface{}
	New() interface{}
	PackEFace(unsafe.Pointer) interface{}
	RType() uintptr
	Set(interface{}, interface{})
	SetIndex(interface{}, interface{}, interface{})
	String() string
	TryGetIndex(interface{}, interface{}) (interface{}, bool)
	Type1() reflect.Type
	UnsafeGetIndex(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer
	UnsafeIndirect(unsafe.Pointer) interface{}
	UnsafeIsNil(unsafe.Pointer) bool
	UnsafeIterate(unsafe.Pointer) reflect2.MapIterator
	UnsafeMakeMap(int) unsafe.Pointer
	UnsafeNew() unsafe.Pointer
	UnsafeSet(unsafe.Pointer, unsafe.Pointer)
	UnsafeSetIndex(unsafe.Pointer, unsafe.Pointer, unsafe.Pointer)
}
type reflect2.PtrType interface {
	AssignableTo(reflect2.Type) bool
	Elem() reflect2.Type
	Implements(reflect2.Type) bool
	Indirect(interface{}) interface{}
	IsNil(interface{}) bool
	IsNullable() bool
	Kind() uint
	LikePtr() bool
	New() interface{}
	PackEFace(unsafe.Pointer) interface{}
	RType() uintptr
	Set(interface{}, interface{})
	String() string
	Type1() reflect.Type
	UnsafeIndirect(unsafe.Pointer) interface{}
	UnsafeIsNil(unsafe.Pointer) bool
	UnsafeNew() unsafe.Pointer
	UnsafeSet(unsafe.Pointer, unsafe.Pointer)
}
type reflect2.SliceType interface {
	Append(interface{}, interface{})
	AssignableTo(reflect2.Type) bool
	Cap(interface{}) int
	Elem() reflect2.Type
	GetIndex(interface{}, int) interface{}
	Grow(interface{}, int)
	Implements(reflect2.Type) bool
	Indirect(interface{}) interface{}
	IsNil(interface{}) bool
	IsNullable() bool
	Kind() uint
	LengthOf(interface{}) int
	LikePtr() bool
	MakeSlice(int, int) interface{}
	New() interface{}
	PackEFace(unsafe.Pointer) interface{}
	RType() uintptr
	Set(interface{}, interface{})
	SetIndex(interface{}, int, interface{})
	SetNil(interface{})
	String() string
	Type1() reflect.Type
	UnsafeAppend(unsafe.Pointer, unsafe.Pointer)
	UnsafeCap(unsafe.Pointer) int
	UnsafeGetIndex(unsafe.Pointer, int) unsafe.Pointer
	UnsafeGrow(unsafe.Pointer, int)
	UnsafeIndirect(unsafe.Pointer) interface{}
	UnsafeIsNil(unsafe.Pointer) bool
	UnsafeLengthOf(unsafe.Pointer) int
	UnsafeMakeSlice(int, int) unsafe.Pointer
	UnsafeNew() unsafe.Pointer
	UnsafeSet(unsafe.Pointer, unsafe.Pointer)
	UnsafeSetIndex(unsafe.Pointer, int, unsafe.Pointer)
	UnsafeSetNil(unsafe.Pointer)
}
type reflect2.StructField interface {
	Anonymous() bool
	Get(interface{}) interface{}
	Index() []int
	Name() string
	Offset() uintptr
	PkgPath() string
	Set(interface{}, interface{})
	Tag() string
	Type() reflect2.Type
	UnsafeGet(unsafe.Pointer) unsafe.Pointer
	UnsafeSet(unsafe.Pointer, unsafe.Pointer)
}
type reflect2.Type interface {
	AssignableTo(reflect2.Type) bool
	Implements(reflect2.Type) bool
	Indirect(interface{}) interface{}
	IsNil(interface{}) bool
	IsNullable() bool
	Kind() uint
	LikePtr() bool
	New() interface{}
	PackEFace(unsafe.Pointer) interface{}
	RType() uintptr
	Set(interface{}, interface{})
	String() string
	Type1() reflect.Type
	UnsafeIndirect(unsafe.Pointer) interface{}
	UnsafeIsNil(unsafe.Pointer) bool
	UnsafeNew() unsafe.Pointer
	UnsafeSet(unsafe.Pointer, unsafe.Pointer)
}
type reflect2.UnsafeArrayType struct {
	reflect2.unsafeType
	elemRType  unsafe.Pointer
	pElemRType unsafe.Pointer
	elemSize   uintptr
	likePtr    bool
}

type reflect2.UnsafeEFaceType struct {
	reflect2.unsafeType
}

type reflect2.UnsafeIFaceType struct {
	reflect2.unsafeType
}

type reflect2.UnsafeMapIterator struct {
	*reflect2.hiter
	pKeyRType  unsafe.Pointer
	pElemRType unsafe.Pointer
}

type reflect2.UnsafeMapType struct {
	reflect2.unsafeType
	pKeyRType  unsafe.Pointer
	pElemRType unsafe.Pointer
}

type reflect2.UnsafePtrType struct {
	reflect2.unsafeType
}

type reflect2.UnsafeSliceType struct {
	reflect2.unsafeType
	elemRType  unsafe.Pointer
	pElemRType unsafe.Pointer
	elemSize   uintptr
}

type reflect2.UnsafeStructField struct {
	reflect.StructField
	structType *reflect2.UnsafeStructType
	rtype      unsafe.Pointer
	ptrRType   unsafe.Pointer
}

type reflect2.UnsafeStructType struct {
	reflect2.unsafeType
	likePtr bool
}

type reflect2.frozenConfig struct {
	useSafeImplementation bool
	cache                 *sync.Map
}

type reflect2.hiter struct {
	key         unsafe.Pointer
	value       unsafe.Pointer
	t           unsafe.Pointer
	h           unsafe.Pointer
	buckets     unsafe.Pointer
	bptr        unsafe.Pointer
	overflow    *[]unsafe.Pointer
	oldoverflow *[]unsafe.Pointer
	startBucket uintptr
	offset      uint8
	wrapped     bool
	B           uint8
	i           uint8
	bucket      uintptr
	checkBucket uintptr
}

type reflect2.safeMapIterator struct {
	i    int
	m    reflect.Value
	keys []reflect.Value
}

type reflect2.safeMapType struct {
	reflect2.safeType
}

type reflect2.safeSliceType struct {
	reflect2.safeType
}

type reflect2.safeStructType struct {
	reflect2.safeType
}

type reflect2.safeType struct {
	reflect.Type
	cfg *reflect2.frozenConfig
}

type reflect2.unsafeType struct {
	reflect2.safeType
	rtype    unsafe.Pointer
	ptrRType unsafe.Pointer
}

type http_dialer.HttpTunnel struct {
	parentDialer *net.Dialer
	isTls        bool
	proxyAddr    string
	tlsConfig    *tls.Config
	auth         http_dialer.ProxyAuthorization
}

type http_dialer.ProxyAuthorization interface {
	ChallengeResponse(string) string
	InitialResponse() string
	Type() string
}
type cmap.ConcurrentMapShared[go.shape.string, go.shape. *uint8] struct {
	items map[string]*uint8
	sync.RWMutex
}

type cmap.ConcurrentMapShared[go.shape.string,go.shape.string] struct{
	items map[string]string
	sync.RWMutex
}

type cmap.ConcurrentMapShared[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }] struct{
	items map[string]go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }
	sync.RWMutex
}

type cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.File] struct{
	items map[string]*torrent.File
	sync.RWMutex
}

type cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent] struct{
	items map[string]*torrent.Torrent
	sync.RWMutex
}

type cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download] struct{
	items map[string]*realdebrid.Download
	sync.RWMutex
}

type cmap.ConcurrentMapShared[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]] struct{
	items map[string]cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	sync.RWMutex
}

type cmap.ConcurrentMapShared[string,string] struct{
	items map[string]string
	sync.RWMutex
}

type cmap.ConcurrentMap[go.shape.string,go.shape.*uint8] struct{
	shards []*cmap.ConcurrentMapShared[go.shape.string,go.shape.*uint8]
	sharding func(string) uint32
}

type cmap.ConcurrentMap[go.shape.string,go.shape.string] struct{
	shards []*cmap.ConcurrentMapShared[go.shape.string,go.shape.string]
	sharding func(string) uint32
}

type cmap.ConcurrentMap[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }] struct{
	shards []*cmap.ConcurrentMapShared[go.shape.string,go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 }]
	sharding func(string) uint32
}

type cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.File] struct{
	shards []*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.File]
	sharding func(string) uint32
}

type cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent] struct{
	shards []*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	sharding func(string) uint32
}

type cmap.ConcurrentMap[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download] struct{
	shards []*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/pkg/realdebrid.Download]
	sharding func(string) uint32
}

type cmap.ConcurrentMap[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]] struct{
	shards []*cmap.ConcurrentMapShared[string,github.com/orcaman/concurrent-map/v2.ConcurrentMap[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]]
	sharding func(string) uint32
}

type cmap.ConcurrentMap[string,string] struct{
	shards []*cmap.ConcurrentMapShared[string,string]
	sharding func(string) uint32
}

type go.shape.struct { github.com/orcaman/concurrent-map/v2.shards []*github.com/orcaman/concurrent-map/v2.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]; github.com/orcaman/concurrent-map/v2.sharding func(string) uint32 } struct{
	shards []*cmap.ConcurrentMapShared[string,*github.com/debridmediamanager/zurg/internal/torrent.Torrent]
	sharding func(string) uint32
}

type ants.Logger interface {
	Printf(string, []interface{})
}
type ants.Pool struct {
	capacity     int32
	running      int32
	lock         sync.Locker
	workers      ants.workerQueue
	state        int32
	cond         *sync.Cond
	workerCache  sync.Pool
	waiting      int32
	purgeDone    int32
	stopPurge    func()
	ticktockDone int32
	stopTicktock func()
	now          atomic.Value
	options      *ants.Options
}

type ants.goWorker struct {
	pool     *ants.Pool
	task     chan func()
	lastUsed time.Time
}

type ants.loopQueue struct {
	items  []ants.worker
	expiry []ants.worker
	head   int
	tail   int
	size   int
	isFull bool
}

type ants.worker interface {
	finish()
	inputFunc(func())
	inputParam(interface{})
	lastUsedTime() time.Time
	run()
}
type ants.workerQueue interface {
	detach() ants.worker
	insert(ants.worker) error
	isEmpty() bool
	len() int
	refresh(int64) []ants.worker
	reset()
}
type ants.workerStack struct {
	items  []ants.worker
	expiry []ants.worker
}

type cobra.Command struct{
	Use string
	Aliases []string
	SuggestFor []string
	Short string
	GroupID string
	Long string
	Example string
	ValidArgs []string
	ValidArgsFunction func(*cobra.Command, []string, string) ([]string, int)
	Args func(*cobra.Command, []string) error
	ArgAliases []string
	BashCompletionFunction string
	Deprecated string
	Annotations map[string]string
	Version string
	PersistentPreRun func(*cobra.Command, []string)
	PersistentPreRunE func(*cobra.Command, []string) error
	PreRun func(*cobra.Command, []string)
	PreRunE func(*cobra.Command, []string) error
	Run func(*cobra.Command, []string)
	RunE func(*cobra.Command, []string) error
	PostRun func(*cobra.Command, []string)
	PostRunE func(*cobra.Command, []string) error
	PersistentPostRun func(*cobra.Command, []string)
	PersistentPostRunE func(*cobra.Command, []string) error
	commandgroups []*cobra.Group
	args []string
	flagErrorBuf *bytes.Buffer
	flags *pflag.FlagSet
	pflags *pflag.FlagSet
	lflags *pflag.FlagSet
	iflags *pflag.FlagSet
	parentsPflags *pflag.FlagSet
	globNormFunc func(*pflag.FlagSet, string) string
	usageFunc func(*cobra.Command) error
	usageTemplate string
	flagErrorFunc func(*cobra.Command, error) error
	helpTemplate string
	helpFunc func(*cobra.Command, []string)
	helpCommand *<nil>
	helpCommandGroupID string
	completionCommandGroupID string
	versionTemplate string
	errPrefix string
	inReader io.Reader
	outWriter io.Writer
	errWriter io.Writer
	FParseErrWhitelist cobra.FParseErrWhitelist
	CompletionOptions cobra.CompletionOptions
	commandsAreSorted bool
	commandCalledAs struct { name string; called bool }
	ctx context.Context
	commands []*cobra.Command
	parent *<nil>
	commandsMaxUseLen int
	commandsMaxCommandPathLen int
	commandsMaxNameLen int
	TraverseChildren bool
	Hidden bool
	SilenceErrors bool
	SilenceUsage bool
	DisableFlagParsing bool
	DisableAutoGenTag bool
	DisableFlagsInUseLine bool
	DisableSuggestions bool
	SuggestionsMinimumDistance int
}

type cobra.flagCompError struct {
	subCommand string
	flagName   string
}

type struct { name string; called bool } struct{
	name string
	called bool
}

type pflag.FlagSet struct {
	Usage                func()
	SortFlags            bool
	ParseErrorsWhitelist pflag.ParseErrorsWhitelist
	name                 string
	parsed               bool
	actual               map[string]*pflag.Flag
	orderedActual        []*pflag.Flag
	sortedActual         []*pflag.Flag
	formal               map[string]*pflag.Flag
	orderedFormal        []*pflag.Flag
	sortedFormal         []*pflag.Flag
	shorthands           map[uint8]*pflag.Flag
	args                 []string
	argsLenAtDash        int
	errorHandling        int
	output               io.Writer
	interspersed         bool
	normalizeNameFunc    func(*pflag.FlagSet, string) string
	addedGoFlagSets      []*flag.FlagSet
}

type pflag.Value interface {
	Set(string) error
	String() string
	Type() string
}
type pflag.boolFlag interface {
	IsBoolFlag() bool
	Set(string) error
	String() string
	Type() string
}
type pflag.boolSliceValue struct {
	value   *[]bool
	changed bool
}

type pflag.durationSliceValue struct {
	value   *[]int64
	changed bool
}

type pflag.flagValueWrapper struct {
	inner    flag.Value
	flagType string
}

type pflag.float32SliceValue struct {
	value   *[]float32
	changed bool
}

type pflag.float64SliceValue struct {
	value   *[]float64
	changed bool
}

type pflag.goBoolFlag interface {
	IsBoolFlag() bool
	Set(string) error
	String() string
}
type pflag.int32SliceValue struct {
	value   *[]int32
	changed bool
}

type pflag.int64SliceValue struct {
	value   *[]int64
	changed bool
}

type pflag.intSliceValue struct {
	value   *[]int
	changed bool
}

type pflag.ipSliceValue struct {
	value   *[][]uint8
	changed bool
}

type pflag.stringArrayValue struct {
	value   *[]string
	changed bool
}

type pflag.stringSliceValue struct {
	value   *[]string
	changed bool
}

type pflag.stringToInt64Value struct {
	value   *map[string]int64
	changed bool
}

type pflag.stringToIntValue struct {
	value   *map[string]int
	changed bool
}

type pflag.stringToStringValue struct {
	value   *map[string]string
	changed bool
}

type pflag.uintSliceValue struct {
	value   *[]uint
	changed bool
}

type multierr.multiError struct {
	copyNeeded atomic.Bool
	errors     []error
}

type zap.AtomicLevel struct {
	l *atomic.Int32
}

type zap.Logger struct {
	core        zapcore.Core
	development bool
	addCaller   bool
	onFatal     zapcore.CheckWriteHook
	name        string
	errorOutput zapcore.WriteSyncer
	addStack    zapcore.LevelEnabler
	callerSkip  int
	clock       zapcore.Clock
}

type zap.Option interface {
	apply(*zap.Logger)
}
type zap.Sink interface {
	Close() error
	Sync() error
	Write([]uint8) (int, error)
}
type zap.SugaredLogger struct{
	base *<nil>
}

type zap.errArrayElem struct {
	error
}

type zap.invalidPair struct {
	position int
	key      interface{}
	value    interface{}
}

type zap.sinkRegistry struct {
	mu        sync.Mutex
	factories map[string]func(*url.URL) (zap.Sink, error)
	openFile  func(string, int, uint32) (*os.File, error)
}

type buffer.Buffer struct {
	bs   []uint8
	pool buffer.Pool
}

type buffer.Pool struct{
	p *pool.Pool[*go.uber.org/zap/buffer.Buffer]
}

type pool.Pool [*go.uber.org / zap.errArrayElem]struct {
	pool sync.Pool
}

type pool.Pool [*go.uber.org / zap / buffer.Buffer]struct {
	pool sync.Pool
}

type pool.Pool [*go.uber.org / zap / internal / stacktrace.Stack]struct {
	pool sync.Pool
}

type pool.Pool [*go.uber.org / zap / zapcore.CheckedEntry]struct {
	pool sync.Pool
}

type pool.Pool [*go.uber.org / zap / zapcore.errArrayElem]struct {
	pool sync.Pool
}

type pool.Pool [*go.uber.org / zap / zapcore.jsonEncoder]struct {
	pool sync.Pool
}

type pool.Pool [*go.uber.org / zap / zapcore.sliceArrayEncoder]struct {
	pool sync.Pool
}

type pool.Pool [go.shape. * uint8]struct {
	pool sync.Pool
}

type stacktrace.Stack struct {
	pcs     []uintptr
	frames  *runtime.Frames
	storage []uintptr
}

type zapcore.ArrayEncoder interface {
	AppendArray(zapcore.ArrayMarshaler) error
	AppendBool(bool)
	AppendByteString([]uint8)
	AppendComplex128(complex128)
	AppendComplex64(complex64)
	AppendDuration(int64)
	AppendFloat32(float32)
	AppendFloat64(float64)
	AppendInt(int)
	AppendInt16(int16)
	AppendInt32(int32)
	AppendInt64(int64)
	AppendInt8(int8)
	AppendObject(zapcore.ObjectMarshaler) error
	AppendReflected(interface{}) error
	AppendString(string)
	AppendTime(time.Time)
	AppendUint(uint)
	AppendUint16(uint16)
	AppendUint32(uint32)
	AppendUint64(uint64)
	AppendUint8(uint8)
	AppendUintptr(uintptr)
}
type zapcore.ArrayMarshaler interface {
	MarshalLogArray(zapcore.ArrayEncoder) error
}
type zapcore.CheckWriteHook interface {
	OnWrite(*zapcore.CheckedEntry, []zapcore.Field)
}
type zapcore.CheckedEntry struct {
	zapcore.Entry
	ErrorOutput zapcore.WriteSyncer
	dirty       bool
	after       zapcore.CheckWriteHook
	cores       []zapcore.Core
}

type zapcore.Clock interface {
	NewTicker(int64) *time.Ticker
	Now() time.Time
}
type zapcore.Core interface {
	Check(zapcore.Entry, *zapcore.CheckedEntry) *zapcore.CheckedEntry
	Enabled(int8) bool
	Sync() error
	With([]zapcore.Field) zapcore.Core
	Write(zapcore.Entry, []zapcore.Field) error
}
type zapcore.Encoder interface {
	AddArray(string, zapcore.ArrayMarshaler) error
	AddBinary(string, []uint8)
	AddBool(string, bool)
	AddByteString(string, []uint8)
	AddComplex128(string, complex128)
	AddComplex64(string, complex64)
	AddDuration(string, int64)
	AddFloat32(string, float32)
	AddFloat64(string, float64)
	AddInt(string, int)
	AddInt16(string, int16)
	AddInt32(string, int32)
	AddInt64(string, int64)
	AddInt8(string, int8)
	AddObject(string, zapcore.ObjectMarshaler) error
	AddReflected(string, interface{}) error
	AddString(string, string)
	AddTime(string, time.Time)
	AddUint(string, uint)
	AddUint16(string, uint16)
	AddUint32(string, uint32)
	AddUint64(string, uint64)
	AddUint8(string, uint8)
	AddUintptr(string, uintptr)
	Clone() zapcore.Encoder
	EncodeEntry(zapcore.Entry, []zapcore.Field) (*buffer.Buffer, error)
	OpenNamespace(string)
}
type zapcore.LevelEnabler interface {
	Enabled(int8) bool
}
type zapcore.MapObjectEncoder struct {
	Fields map[string]interface{}
	cur    map[string]interface{}
}

type zapcore.ObjectEncoder interface {
	AddArray(string, zapcore.ArrayMarshaler) error
	AddBinary(string, []uint8)
	AddBool(string, bool)
	AddByteString(string, []uint8)
	AddComplex128(string, complex128)
	AddComplex64(string, complex64)
	AddDuration(string, int64)
	AddFloat32(string, float32)
	AddFloat64(string, float64)
	AddInt(string, int)
	AddInt16(string, int16)
	AddInt32(string, int32)
	AddInt64(string, int64)
	AddInt8(string, int8)
	AddObject(string, zapcore.ObjectMarshaler) error
	AddReflected(string, interface{}) error
	AddString(string, string)
	AddTime(string, time.Time)
	AddUint(string, uint)
	AddUint16(string, uint16)
	AddUint32(string, uint32)
	AddUint64(string, uint64)
	AddUint8(string, uint8)
	AddUintptr(string, uintptr)
	OpenNamespace(string)
}
type zapcore.ObjectMarshaler interface {
	MarshalLogObject(zapcore.ObjectEncoder) error
}
type zapcore.PrimitiveArrayEncoder interface {
	AppendBool(bool)
	AppendByteString([]uint8)
	AppendComplex128(complex128)
	AppendComplex64(complex64)
	AppendFloat32(float32)
	AppendFloat64(float64)
	AppendInt(int)
	AppendInt16(int16)
	AppendInt32(int32)
	AppendInt64(int64)
	AppendInt8(int8)
	AppendString(string)
	AppendUint(uint)
	AppendUint16(uint16)
	AppendUint32(uint32)
	AppendUint64(uint64)
	AppendUint8(uint8)
	AppendUintptr(uintptr)
}
type zapcore.ReflectedEncoder interface {
	Encode(interface{}) error
}
type zapcore.WriteSyncer interface {
	Sync() error
	Write([]uint8) (int, error)
}
type zapcore.appendTimeEncoder interface {
	AppendTimeLayout(time.Time, string)
}
type zapcore.consoleEncoder struct {
	*zapcore.jsonEncoder
}

type zapcore.errArrayElem struct {
	err error
}

type zapcore.errorGroup interface {
	Errors() []error
}
type zapcore.ioCore struct {
	zapcore.LevelEnabler
	enc zapcore.Encoder
	out zapcore.WriteSyncer
}

type zapcore.jsonEncoder struct {
	*zapcore.EncoderConfig
	buf            *buffer.Buffer
	spaced         bool
	openNamespaces int
	reflectBuf     *buffer.Buffer
	reflectEnc     zapcore.ReflectedEncoder
}

type zapcore.lazyWithCore struct {
	zapcore.Core
	sync.Once
	fields []zapcore.Field
}

type zapcore.leveledEnabler interface {
	Enabled(int8) bool
	Level() int8
}
type zapcore.lockedWriteSyncer struct {
	sync.Mutex
	ws zapcore.WriteSyncer
}

type zapcore.sliceArrayEncoder struct {
	elems []interface{}
}

type socks.Conn struct {
	net.Conn
	boundAddr net.Addr
}

type socks.Dialer struct {
	cmd          int
	proxyNetwork string
	proxyAddress string
	ProxyDial    func(context.Context, string, string) (net.Conn, error)
	AuthMethods  []int
	Authenticate func(context.Context, io.ReadWriter, int) error
}

type proxy.ContextDialer interface {
	DialContext(context.Context, string, string) (net.Conn, error)
}
type proxy.Dialer interface {
	Dial(string, string) (net.Conn, error)
}
type struct { anchor []uint8; alias bool } struct{
	anchor []uint8
	alias bool
}

type struct { handle []uint8; suffix []uint8 } struct{
	handle []uint8
	suffix []uint8
}

type struct { items_data []yaml.yaml_node_item_t; style yaml.yaml_sequence_style_t } struct{
	items_data []int
	style int8
}

type struct { pairs_data []yaml.yaml_node_pair_t; pairs_start *yaml.yaml_node_pair_t; pairs_end *yaml.yaml_node_pair_t; pairs_top *yaml.yaml_node_pair_t; style yaml.yaml_mapping_style_t } struct{
	pairs_data []yaml.yaml_node_pair_t
	pairs_start *yaml.yaml_node_pair_t
	pairs_end *yaml.yaml_node_pair_t
	pairs_top *yaml.yaml_node_pair_t
	style int8
}

type struct { references int; anchor int; serialized bool } struct{
	references int
	anchor int
	serialized bool
}

type struct { value []uint8; length int; style yaml.yaml_scalar_style_t } struct{
	value []uint8
	length int
	style int8
}

type struct { value []uint8; multiline bool; flow_plain_allowed bool; block_plain_allowed bool; single_quoted_allowed bool; block_allowed bool; style yaml.yaml_scalar_style_t } struct{
	value []uint8
	multiline bool
	flow_plain_allowed bool
	block_plain_allowed bool
	single_quoted_allowed bool
	block_allowed bool
	style int8
}

type yaml.IsZeroer interface {
	IsZero() bool
}
type yaml.Marshaler interface {
	MarshalYAML() (interface{}, error)
}
type yaml.Unmarshaler interface {
	UnmarshalYAML(*yaml.Node) error
}
type yaml.decoder struct {
	doc            *yaml.Node
	aliases        map[*yaml.Node]bool
	terrors        []string
	stringMapType  reflect.Type
	generalMapType reflect.Type
	knownFields    bool
	uniqueKeys     bool
	decodeCount    int
	aliasCount     int
	aliasDepth     int
	mergedFields   map[interface{}]bool
}

type yaml.encoder struct {
	emitter  yaml.yaml_emitter_t
	event    yaml.yaml_event_t
	out      []uint8
	flow     bool
	indent   int
	doneInit bool
}

type yaml.obsoleteUnmarshaler interface {
	UnmarshalYAML(func(interface{}) error) error
}
type yaml.parser struct {
	parser   yaml.yaml_parser_t
	event    yaml.yaml_event_t
	doc      *yaml.Node
	anchors  map[string]*yaml.Node
	doneInit bool
	textless bool
}

type yaml.resolveMapItem struct {
	value interface{}
	tag   string
}

type yaml.yamlError struct {
	err error
}

type yaml.yaml_alias_data_t struct {
	anchor []uint8
	index  int
	mark   yaml.yaml_mark_t
}

type yaml.yaml_comment_t struct {
	scan_mark  yaml.yaml_mark_t
	token_mark yaml.yaml_mark_t
	start_mark yaml.yaml_mark_t
	end_mark   yaml.yaml_mark_t
	head       []uint8
	line       []uint8
	foot       []uint8
}

type yaml.yaml_document_t struct {
	nodes                []yaml.yaml_node_t
	version_directive    *yaml.yaml_version_directive_t
	tag_directives_data  []yaml.yaml_tag_directive_t
	tag_directives_start int
	tag_directives_end   int
	start_implicit       int
	end_implicit         int
	start_mark           yaml.yaml_mark_t
	end_mark             yaml.yaml_mark_t
}

type yaml.yaml_emitter_t struct {
	error              int
	problem            string
	write_handler      func(*yaml.yaml_emitter_t, []uint8) error
	output_buffer      *[]uint8
	output_writer      io.Writer
	buffer             []uint8
	buffer_pos         int
	raw_buffer         []uint8
	raw_buffer_pos     int
	encoding           int
	canonical          bool
	best_indent        int
	best_width         int
	unicode            bool
	line_break         int
	state              int
	states             []int
	events             []yaml.yaml_event_t
	events_head        int
	indents            []int
	tag_directives     []yaml.yaml_tag_directive_t
	indent             int
	flow_level         int
	root_context       bool
	sequence_context   bool
	mapping_context    bool
	simple_key_context bool
	line               int
	column             int
	whitespace         bool
	indention          bool
	open_ended         bool
	space_above        bool
	foot_indent        int
	anchor_data        struct {
		anchor []uint8
		alias  bool
	}
	tag_data struct {
		handle []uint8
		suffix []uint8
	}
	scalar_data struct {
		value                 []uint8
		multiline             bool
		flow_plain_allowed    bool
		block_plain_allowed   bool
		single_quoted_allowed bool
		block_allowed         bool
		style                 yaml.yaml_scalar_style_t
	}
	head_comment     []uint8
	line_comment     []uint8
	foot_comment     []uint8
	tail_comment     []uint8
	key_line_comment []uint8
	opened           bool
	closed           bool
	anchors          *struct {
		references int
		anchor     int
		serialized bool
	}
	last_anchor_id int
	document       *yaml.yaml_document_t
}

type yaml.yaml_event_t struct {
	typ               int8
	start_mark        yaml.yaml_mark_t
	end_mark          yaml.yaml_mark_t
	encoding          int
	version_directive *yaml.yaml_version_directive_t
	tag_directives    []yaml.yaml_tag_directive_t
	head_comment      []uint8
	line_comment      []uint8
	foot_comment      []uint8
	tail_comment      []uint8
	anchor            []uint8
	tag               []uint8
	value             []uint8
	implicit          bool
	quoted_implicit   bool
	style             int8
}

type yaml.yaml_mark_t struct {
	index  int
	line   int
	column int
}

type yaml.yaml_node_pair_t struct {
	key   int
	value int
}

type yaml.yaml_node_t struct {
	typ    int
	tag    []uint8
	scalar struct {
		value  []uint8
		length int
		style  yaml.yaml_scalar_style_t
	}
	sequence struct {
		items_data []yaml.yaml_node_item_t
		style      yaml.yaml_sequence_style_t
	}
	mapping struct {
		pairs_data  []yaml.yaml_node_pair_t
		pairs_start *yaml.yaml_node_pair_t
		pairs_end   *yaml.yaml_node_pair_t
		pairs_top   *yaml.yaml_node_pair_t
		style       yaml.yaml_mapping_style_t
	}
	start_mark yaml.yaml_mark_t
	end_mark   yaml.yaml_mark_t
}

type yaml.yaml_parser_t struct {
	error                 int
	problem               string
	problem_offset        int
	problem_value         int
	problem_mark          yaml.yaml_mark_t
	context               string
	context_mark          yaml.yaml_mark_t
	read_handler          func(*yaml.yaml_parser_t, []uint8) (int, error)
	input_reader          io.Reader
	input                 []uint8
	input_pos             int
	eof                   bool
	buffer                []uint8
	buffer_pos            int
	unread                int
	newlines              int
	raw_buffer            []uint8
	raw_buffer_pos        int
	encoding              int
	offset                int
	mark                  yaml.yaml_mark_t
	head_comment          []uint8
	line_comment          []uint8
	foot_comment          []uint8
	tail_comment          []uint8
	stem_comment          []uint8
	comments              []yaml.yaml_comment_t
	comments_head         int
	stream_start_produced bool
	stream_end_produced   bool
	flow_level            int
	tokens                []yaml.yaml_token_t
	tokens_head           int
	tokens_parsed         int
	token_available       bool
	indent                int
	indents               []int
	simple_key_allowed    bool
	simple_keys           []yaml.yaml_simple_key_t
	simple_keys_by_tok    map[int]int
	state                 int
	states                []int
	marks                 []yaml.yaml_mark_t
	tag_directives        []yaml.yaml_tag_directive_t
	aliases               []yaml.yaml_alias_data_t
	document              *yaml.yaml_document_t
}

type yaml.yaml_simple_key_t struct {
	possible     bool
	required     bool
	token_number int
	mark         yaml.yaml_mark_t
}

type yaml.yaml_tag_directive_t struct {
	handle []uint8
	prefix []uint8
}

type yaml.yaml_token_t struct {
	typ        int
	start_mark yaml.yaml_mark_t
	end_mark   yaml.yaml_mark_t
	encoding   int
	value      []uint8
	suffix     []uint8
	prefix     []uint8
	style      int8
	major      int8
	minor      int8
}

type yaml.yaml_version_directive_t struct {
	major int8
	minor int8
}


